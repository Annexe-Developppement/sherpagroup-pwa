{"map":"{\"version\":3,\"sources\":[\"125.986782dabcf73868a8b9.js\"],\"names\":[\"window\",\"push\",\"./node_modules/@magento/peregrine/lib/talons/CartPage/PriceAdjustments/ShippingMethods/useShippingForm.js\",\"module\",\"__webpack_exports__\",\"__webpack_require__\",\"eval\"],\"mappings\":\"CAACA,OAAqB,aAAIA,OAAqB,cAAK,IAAIC,KAAK,CAAC,CAAC,KAAK,CAE9DC;;;;wDAKA,SAAUC,OAAQC,oBAAqBC,qBAE7C,aACAC,KAAK\"}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{\"./node_modules/@magento/peregrine/lib/talons/CartPage/PriceAdjustments/ShippingMethods/useShippingForm.js\":\n/*!*****************************************************************************************************************!*\\\n  !*** ./node_modules/@magento/peregrine/lib/talons/CartPage/PriceAdjustments/ShippingMethods/useShippingForm.js ***!\n  \\*****************************************************************************************************************/\n/*! exports provided: MOCKED_ADDRESS, useShippingForm */function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MOCKED_ADDRESS\", function() { return MOCKED_ADDRESS; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useShippingForm\", function() { return useShippingForm; });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client */ \"./node_modules/@apollo/client/index.js\");\\n/* harmony import */ var _context_cart__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../context/cart */ \"./node_modules/@magento/peregrine/lib/context/cart.js\");\\nvar _s = __webpack_require__.$Refresh$.signature();\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? Object(arguments[i]) : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === \\'function\\') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\n/**\\n * GraphQL currently requires a complete address before it will return\\n * estimated shipping prices, even though it only needs Country, State,\\n * and Zip. Assuming this is a bug or oversight, we\\'re going to mock the\\n * data points we don\\'t want to bother collecting from the Customer at this\\n * step in the process. We need to be very mindful that these values are never\\n * displayed to the user.\\n *\\n * @ignore\\n */\\n\\nconst MOCKED_ADDRESS = {\\n  city: \\'city\\',\\n  firstname: \\'firstname\\',\\n  lastname: \\'lastname\\',\\n  street: [\\'street\\'],\\n  telephone: \\'telephone\\'\\n};\\n/**\\n * Contains logic for a shipping form component.\\n * It performs effects and returns props data related to rendering a shipping address form.\\n *\\n * This talon performs the following effects:\\n *\\n * - Manage the updating state of the cart while the mutation for setting the shipping address is in flight\\n *\\n * @function\\n *\\n * @param {Object} props\\n * @param {SelectShippingFields} props.selectedValues The values from the select input fields in the shipping form\\n * @param {function} props.setIsCartUpdating Callback function for setting the update state for the cart.\\n * @param {ShippingFormMutations} props.mutations GraphQL mutations for the shipping form.\\n * @param {ShippingFormQueries} props.queries GraphQL queries for the shipping form.\\n *\\n * @returns {ShippingFormTalonProps}\\n *\\n * @example <caption>Importing into your project</caption>\\n * import { useShippingForm } from \\'@magento/peregrine/lib/talons/CartPage/PriceAdjustments/ShippingMethods/useShippingForm\\';\\n */\\n\\nconst useShippingForm = props => {\\n  _s();\\n\\n  const {\\n    selectedValues,\\n    setIsCartUpdating,\\n    mutations: {\\n      setShippingAddressMutation\\n    },\\n    queries: {\\n      shippingMethodsQuery\\n    }\\n  } = props;\\n  const [{\\n    cartId\\n  }] = Object(_context_cart__WEBPACK_IMPORTED_MODULE_2__[\"useCartContext\"])();\\n  const apolloClient = Object(_apollo_client__WEBPACK_IMPORTED_MODULE_1__[\"useApolloClient\"])();\\n  const [setShippingAddress, {\\n    called: isSetShippingAddressCalled,\\n    error: errorSettingShippingAddress,\\n    loading: isSetShippingLoading\\n  }] = Object(_apollo_client__WEBPACK_IMPORTED_MODULE_1__[\"useMutation\"])(setShippingAddressMutation);\\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(() => {\\n    if (isSetShippingAddressCalled) {\\n      setIsCartUpdating(isSetShippingLoading);\\n    }\\n  }, [isSetShippingLoading, isSetShippingAddressCalled, setIsCartUpdating]);\\n  /**\\n   * @ignore\\n   *\\n   * When the zip value is changed, go ahead and manually wipe out that\\n   * portion of the cache, which will cause the components subscribed to\\n   * that state to re-render. Ideally we would send a mutation to clear the\\n   * shipping address set on the cart, to keep those states in sync, but the\\n   * GraphQL API does not currently supported clearing addresses.\\n   */\\n\\n  const handleZipChange = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(zip => {\\n    if (zip !== selectedValues.zip) {\\n      const data = apolloClient.readQuery({\\n        query: shippingMethodsQuery,\\n        variables: {\\n          cartId\\n        }\\n      });\\n      const {\\n        cart\\n      } = data;\\n      const {\\n        shipping_addresses: shippingAddresses\\n      } = cart;\\n\\n      if (shippingAddresses.length) {\\n        const primaryAddress = shippingAddresses[0];\\n        const {\\n          available_shipping_methods: availableMethods\\n        } = primaryAddress;\\n\\n        if (availableMethods.length) {\\n          apolloClient.writeQuery({\\n            query: shippingMethodsQuery,\\n            data: {\\n              cart: _objectSpread({}, cart, {\\n                shipping_addresses: [_objectSpread({}, primaryAddress, {\\n                  available_shipping_methods: []\\n                })]\\n              })\\n            }\\n          });\\n        }\\n      }\\n    }\\n  }, [apolloClient, cartId, selectedValues.zip, shippingMethodsQuery]);\\n  const handleOnSubmit = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useCallback\"])(formValues => {\\n    const {\\n      country,\\n      region,\\n      zip\\n    } = formValues;\\n\\n    if (country && region && zip) {\\n      setShippingAddress({\\n        variables: {\\n          cartId,\\n          address: _objectSpread({}, MOCKED_ADDRESS, {\\n            country_code: country,\\n            postcode: zip,\\n            region\\n          })\\n        }\\n      });\\n    }\\n  }, [cartId, setShippingAddress]);\\n  const errors = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useMemo\"])(() => new Map([[\\'setShippingAddressMutation\\', errorSettingShippingAddress]]), [errorSettingShippingAddress]);\\n  return {\\n    errors,\\n    handleOnSubmit,\\n    handleZipChange,\\n    isSetShippingLoading\\n  };\\n};\\n/** JSDocs type definitions */\\n\\n/**\\n * Values for the select input fields on the shipping form.\\n * This is a prop used by the {@link useShippingForm} talon.\\n *\\n * @typedef {Object} SelectShippingFields\\n *\\n * @property {String} country Country shipping destination\\n * @property {String} region Country\\'s region shipping destination\\n * @property {String} zip Country\\'s zip code shipping destination\\n */\\n\\n/**\\n * GraphQL mutations for the shipping form.\\n * This is a type used by the {@link useShippingForm} talon.\\n *\\n * @typedef {Object} ShippingFormMutations\\n *\\n * @property {GraphQLAST} setShippingAddressMutation Mutation for setting the shipping address on a cart\\n *\\n * @see [shippingForm.js]{@link https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/CartPage/PriceAdjustments/ShippingMethods/shippingForm.js}\\n * for the query used in Venia\\n */\\n\\n/**\\n * GraphQL queries for the shipping form.\\n * This is a type used by the {@link useShippingForm} talon.\\n *\\n * @typedef {Object} ShippingFormQueries\\n *\\n * @property {GraphQLAST} shippingMethodsQuery Query for getting data about available shipping methods\\n *\\n * @see [shippingMethods.gql.js]{@link https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/CartPage/PriceAdjustments/ShippingMethods/shippingMethods.gql.js}\\n * for the query used in Venia\\n */\\n\\n/**\\n * Object type returned by the {@link useShippingForm} talon.\\n * It provides props data to use when rendering a shipping form component.\\n *\\n * @typedef {Object} ShippingFormTalonProps\\n *\\n * @property {Array<Error>} formErrors A list of form errors\\n * @property {function} handleOnSubmit Callback function to handle form submissions\\n * @property {function} handleZipChange Callback function to handle a zip code change\\n * @property {boolean} isSetShippingLoading True if the cart shipping information is being set. False otherwise.\\n */\\n\\n_s(useShippingForm, \"D7MTQircq/YPNIo6bwMsA/EMWiU=\", false, function () {\\n  return [_context_cart__WEBPACK_IMPORTED_MODULE_2__[\"useCartContext\"], _apollo_client__WEBPACK_IMPORTED_MODULE_1__[\"useApolloClient\"], _apollo_client__WEBPACK_IMPORTED_MODULE_1__[\"useMutation\"]];\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/@magento/peregrine/lib/talons/CartPage/PriceAdjustments/ShippingMethods/useShippingForm.js\\n')}}]);","extractedComments":[]}