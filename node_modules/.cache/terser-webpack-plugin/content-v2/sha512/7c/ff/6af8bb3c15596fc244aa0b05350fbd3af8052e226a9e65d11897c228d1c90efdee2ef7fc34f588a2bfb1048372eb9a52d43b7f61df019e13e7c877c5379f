{"map":"{\"version\":3,\"sources\":[\"14.85e6d77ac23628dd7290.js\"],\"names\":[\"window\",\"push\",\"./node_modules/informed/dist/esm/index.js\",\"module\",\"__webpack_exports__\",\"__webpack_require__\",\"eval\"],\"mappings\":\"CAACA,OAAqB,aAAIA,OAAqB,cAAK,IAAIC,KAAK,CAAC,CAAC,IAAI,CAE7DC;;;;iiBAKA,SAAUC,OAAQC,oBAAqBC,qBAE7C,aACAC,KAAK\"}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{\"./node_modules/informed/dist/esm/index.js\":\n/*!*************************************************!*\\\n  !*** ./node_modules/informed/dist/esm/index.js ***!\n  \\*************************************************/\n/*! exports provided: ArrayField, BasicCheckbox, BasicRadio, BasicRadioGroup, BasicSelect, BasicText, BasicTextArea, Checkbox, Form, FormComponents, FormField, FormFields, FormProvider, FormState, Input, Multistep, Option, Radio, RadioGroup, Relevant, SchemaFields, Scope, Select, Text, TextArea, asField, useArrayField, useArrayFieldApi, useArrayFieldItemApi, useField, useFieldApi, useFieldState, useForm, useFormApi, useFormState, useMultistepApi, useMultistepState, withFieldApi, withFieldState, withFormApi, withFormState, withRadioGroup */function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ArrayField\", function() { return ArrayField; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BasicCheckbox\", function() { return Checkbox; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BasicRadio\", function() { return Radio; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BasicRadioGroup\", function() { return RadioGroup; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BasicSelect\", function() { return Select; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BasicText\", function() { return Text; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BasicTextArea\", function() { return TextArea; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Checkbox\", function() { return Checkbox$1; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Form\", function() { return Form; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormComponents\", function() { return FormComponents; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormField\", function() { return FormField; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormFields\", function() { return FormFields; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormProvider\", function() { return FormProvider; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormState\", function() { return FormState; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Input\", function() { return Input; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Multistep\", function() { return Multistep; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Option\", function() { return Option; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Radio\", function() { return Radio$1; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RadioGroup\", function() { return RadioGroup$1; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Relevant\", function() { return Relevant; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SchemaFields\", function() { return SchemaFields; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Scope\", function() { return Scope; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Select\", function() { return Select$1; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Text\", function() { return Text$1; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextArea\", function() { return TextArea$1; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"asField\", function() { return asField; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useArrayField\", function() { return useArrayField; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useArrayFieldApi\", function() { return useArrayFieldApi; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useArrayFieldItemApi\", function() { return useArrayFieldItemApi; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useField\", function() { return useField; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useFieldApi\", function() { return useFieldApi; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useFieldState\", function() { return useFieldState; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useForm\", function() { return useForm; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useFormApi\", function() { return useFormApi; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useFormState\", function() { return useFormState; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useMultistepApi\", function() { return useMultistepApi; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useMultistepState\", function() { return useMultistepState; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"withFieldApi\", function() { return withFieldApi; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"withFieldState\", function() { return withFieldState; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"withFormApi\", function() { return withFormApi; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"withFormState\", function() { return withFormState; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"withRadioGroup\", function() { return withRadioGroup; });\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);\\n\\n\\n\\nfunction _classCallCheck(instance, Constructor) {\\n  if (!(instance instanceof Constructor)) {\\n    throw new TypeError(\"Cannot call a class as a function\");\\n  }\\n}\\n\\nfunction _defineProperties(target, props) {\\n  for (var i = 0; i < props.length; i++) {\\n    var descriptor = props[i];\\n    descriptor.enumerable = descriptor.enumerable || false;\\n    descriptor.configurable = true;\\n    if (\"value\" in descriptor) descriptor.writable = true;\\n    Object.defineProperty(target, descriptor.key, descriptor);\\n  }\\n}\\n\\nfunction _createClass(Constructor, protoProps, staticProps) {\\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\\n  if (staticProps) _defineProperties(Constructor, staticProps);\\n  return Constructor;\\n}\\n\\nfunction _defineProperty(obj, key, value) {\\n  if (key in obj) {\\n    Object.defineProperty(obj, key, {\\n      value: value,\\n      enumerable: true,\\n      configurable: true,\\n      writable: true\\n    });\\n  } else {\\n    obj[key] = value;\\n  }\\n\\n  return obj;\\n}\\n\\nfunction _extends() {\\n  _extends = Object.assign || function (target) {\\n    for (var i = 1; i < arguments.length; i++) {\\n      var source = arguments[i];\\n\\n      for (var key in source) {\\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\\n          target[key] = source[key];\\n        }\\n      }\\n    }\\n\\n    return target;\\n  };\\n\\n  return _extends.apply(this, arguments);\\n}\\n\\nfunction ownKeys(object, enumerableOnly) {\\n  var keys = Object.keys(object);\\n\\n  if (Object.getOwnPropertySymbols) {\\n    var symbols = Object.getOwnPropertySymbols(object);\\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\\n    });\\n    keys.push.apply(keys, symbols);\\n  }\\n\\n  return keys;\\n}\\n\\nfunction _objectSpread2(target) {\\n  for (var i = 1; i < arguments.length; i++) {\\n    var source = arguments[i] != null ? arguments[i] : {};\\n\\n    if (i % 2) {\\n      ownKeys(Object(source), true).forEach(function (key) {\\n        _defineProperty(target, key, source[key]);\\n      });\\n    } else if (Object.getOwnPropertyDescriptors) {\\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\\n    } else {\\n      ownKeys(Object(source)).forEach(function (key) {\\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\\n      });\\n    }\\n  }\\n\\n  return target;\\n}\\n\\nfunction _inherits(subClass, superClass) {\\n  if (typeof superClass !== \"function\" && superClass !== null) {\\n    throw new TypeError(\"Super expression must either be null or a function\");\\n  }\\n\\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\\n    constructor: {\\n      value: subClass,\\n      writable: true,\\n      configurable: true\\n    }\\n  });\\n  if (superClass) _setPrototypeOf(subClass, superClass);\\n}\\n\\nfunction _getPrototypeOf(o) {\\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\\n    return o.__proto__ || Object.getPrototypeOf(o);\\n  };\\n  return _getPrototypeOf(o);\\n}\\n\\nfunction _setPrototypeOf(o, p) {\\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\\n    o.__proto__ = p;\\n    return o;\\n  };\\n\\n  return _setPrototypeOf(o, p);\\n}\\n\\nfunction _isNativeReflectConstruct() {\\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\\n  if (Reflect.construct.sham) return false;\\n  if (typeof Proxy === \"function\") return true;\\n\\n  try {\\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\\n    return true;\\n  } catch (e) {\\n    return false;\\n  }\\n}\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) {\\n  if (source == null) return {};\\n  var target = {};\\n  var sourceKeys = Object.keys(source);\\n  var key, i;\\n\\n  for (i = 0; i < sourceKeys.length; i++) {\\n    key = sourceKeys[i];\\n    if (excluded.indexOf(key) >= 0) continue;\\n    target[key] = source[key];\\n  }\\n\\n  return target;\\n}\\n\\nfunction _objectWithoutProperties(source, excluded) {\\n  if (source == null) return {};\\n\\n  var target = _objectWithoutPropertiesLoose(source, excluded);\\n\\n  var key, i;\\n\\n  if (Object.getOwnPropertySymbols) {\\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\\n\\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\\n      key = sourceSymbolKeys[i];\\n      if (excluded.indexOf(key) >= 0) continue;\\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\\n      target[key] = source[key];\\n    }\\n  }\\n\\n  return target;\\n}\\n\\nfunction _assertThisInitialized(self) {\\n  if (self === void 0) {\\n    throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\");\\n  }\\n\\n  return self;\\n}\\n\\nfunction _possibleConstructorReturn(self, call) {\\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\\n    return call;\\n  }\\n\\n  return _assertThisInitialized(self);\\n}\\n\\nfunction _createSuper(Derived) {\\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\\n\\n  return function _createSuperInternal() {\\n    var Super = _getPrototypeOf(Derived),\\n        result;\\n\\n    if (hasNativeReflectConstruct) {\\n      var NewTarget = _getPrototypeOf(this).constructor;\\n\\n      result = Reflect.construct(Super, arguments, NewTarget);\\n    } else {\\n      result = Super.apply(this, arguments);\\n    }\\n\\n    return _possibleConstructorReturn(this, result);\\n  };\\n}\\n\\nfunction _slicedToArray(arr, i) {\\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\\n}\\n\\nfunction _toConsumableArray(arr) {\\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\\n}\\n\\nfunction _arrayWithoutHoles(arr) {\\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\\n}\\n\\nfunction _arrayWithHoles(arr) {\\n  if (Array.isArray(arr)) return arr;\\n}\\n\\nfunction _iterableToArray(iter) {\\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\\n}\\n\\nfunction _iterableToArrayLimit(arr, i) {\\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\\n  var _arr = [];\\n  var _n = true;\\n  var _d = false;\\n  var _e = undefined;\\n\\n  try {\\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\\n      _arr.push(_s.value);\\n\\n      if (i && _arr.length === i) break;\\n    }\\n  } catch (err) {\\n    _d = true;\\n    _e = err;\\n  } finally {\\n    try {\\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\\n    } finally {\\n      if (_d) throw _e;\\n    }\\n  }\\n\\n  return _arr;\\n}\\n\\nfunction _unsupportedIterableToArray(o, minLen) {\\n  if (!o) return;\\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\\n  var n = Object.prototype.toString.call(o).slice(8, -1);\\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\\n}\\n\\nfunction _arrayLikeToArray(arr, len) {\\n  if (len == null || len > arr.length) len = arr.length;\\n\\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\\n\\n  return arr2;\\n}\\n\\nfunction _nonIterableSpread() {\\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\\n}\\n\\nfunction _nonIterableRest() {\\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\\n}\\n\\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\\n  var it;\\n\\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\\n      if (it) o = it;\\n      var i = 0;\\n\\n      var F = function () {};\\n\\n      return {\\n        s: F,\\n        n: function () {\\n          if (i >= o.length) return {\\n            done: true\\n          };\\n          return {\\n            done: false,\\n            value: o[i++]\\n          };\\n        },\\n        e: function (e) {\\n          throw e;\\n        },\\n        f: F\\n      };\\n    }\\n\\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\\n  }\\n\\n  var normalCompletion = true,\\n      didErr = false,\\n      err;\\n  return {\\n    s: function () {\\n      it = o[Symbol.iterator]();\\n    },\\n    n: function () {\\n      var step = it.next();\\n      normalCompletion = step.done;\\n      return step;\\n    },\\n    e: function (e) {\\n      didErr = true;\\n      err = e;\\n    },\\n    f: function () {\\n      try {\\n        if (!normalCompletion && it.return != null) it.return();\\n      } finally {\\n        if (didErr) throw err;\\n      }\\n    }\\n  };\\n}\\n\\nfunction createCommonjsModule(fn, module) {\\n\\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\\n}\\n\\nvar debug = createCommonjsModule(function (module) {\\n/**\\n * \\n * I stole most of this code from the debug lib\\n * https://github.com/visionmedia/debug\\n * \\n * Just wanted it to be easy to debug without relying on the dependency!\\n */\\n\\n/**\\n\\t* Selects a color for a debug namespace\\n  * @param {String} namespace The namespace string for the for the debug instance to be colored\\n  * @param {String} colors color pallette to choose from\\n\\t* @return {Number|String} An ANSI color code for the given namespace\\n\\t* @api private\\n\\t*/\\nfunction selectColor(namespace, colors) {\\n  var hash = 0;\\n\\n  for (var i = 0; i < namespace.length; i++) {\\n    hash = (hash << 5) - hash + namespace.charCodeAt(i);\\n    hash |= 0; // Convert to 32bit integer\\n  }\\n\\n  return colors[Math.abs(hash) % colors.length];\\n}\\n/**\\n * Adds ANSI color escape codes if enabled.\\n *\\n * @api public\\n */\\n\\n\\nfunction formatNodeArgs(args, config) {\\n  var name = config.namespace;\\n\\n  if (config.useColors) {\\n    var c = config.color;\\n    var colorCode = \"\\\\x1B[3\" + (c < 8 ? c : \\'8;5;\\' + c);\\n    var prefix = \"  \".concat(colorCode, \";1m\").concat(name, \" \\\\x1B[0m\");\\n    args[0] = prefix + args[0].split(\\'\\\\n\\').join(\\'\\\\n\\' + prefix);\\n  } else {\\n    args[0] = name + \\' \\' + args[0];\\n  }\\n}\\n/**\\n * Colorize log arguments if enabled.\\n *\\n */\\n\\n\\nfunction formatBrowserArgs(args, config) {\\n  args[0] = (config.useColors ? \\'%c\\' : \\'\\') + config.namespace;\\n\\n  if (!config.useColors) {\\n    return;\\n  }\\n\\n  var c = \\'color: \\' + config.color; // The final \"%c\" is somewhat tricky, because there could be other\\n  // arguments passed either before or after the %c, so we need to\\n  // figure out the correct index to insert the CSS into\\n\\n  var index = 0;\\n  var lastC = 0;\\n  args[0].replace(/%[a-zA-Z%]/g, function (match) {\\n    if (match === \\'%%\\') {\\n      return;\\n    }\\n\\n    index++;\\n\\n    if (match === \\'%c\\') {\\n      // We only are interested in the *last* %c\\n      // (the user may have provided their own)\\n      lastC = index;\\n    }\\n  });\\n  args.splice(lastC, 0, c);\\n}\\n\\nvar browserColors = [\\'#0000CC\\', \\'#0000FF\\', \\'#0033CC\\', \\'#0033FF\\', \\'#0066CC\\', \\'#0066FF\\', \\'#0099CC\\', \\'#0099FF\\', \\'#00CC00\\', \\'#00CC33\\', \\'#00CC66\\', \\'#00CC99\\', \\'#00CCCC\\', \\'#00CCFF\\', \\'#3300CC\\', \\'#3300FF\\', \\'#3333CC\\', \\'#3333FF\\', \\'#3366CC\\', \\'#3366FF\\', \\'#3399CC\\', \\'#3399FF\\', \\'#33CC00\\', \\'#33CC33\\', \\'#33CC66\\', \\'#33CC99\\', \\'#33CCCC\\', \\'#33CCFF\\', \\'#6600CC\\', \\'#6600FF\\', \\'#6633CC\\', \\'#6633FF\\', \\'#66CC00\\', \\'#66CC33\\', \\'#9900CC\\', \\'#9900FF\\', \\'#9933CC\\', \\'#9933FF\\', \\'#99CC00\\', \\'#99CC33\\', \\'#CC0000\\', \\'#CC0033\\', \\'#CC0066\\', \\'#CC0099\\', \\'#CC00CC\\', \\'#CC00FF\\', \\'#CC3300\\', \\'#CC3333\\', \\'#CC3366\\', \\'#CC3399\\', \\'#CC33CC\\', \\'#CC33FF\\', \\'#CC6600\\', \\'#CC6633\\', \\'#CC9900\\', \\'#CC9933\\', \\'#CCCC00\\', \\'#CCCC33\\', \\'#FF0000\\', \\'#FF0033\\', \\'#FF0066\\', \\'#FF0099\\', \\'#FF00CC\\', \\'#FF00FF\\', \\'#FF3300\\', \\'#FF3333\\', \\'#FF3366\\', \\'#FF3399\\', \\'#FF33CC\\', \\'#FF33FF\\', \\'#FF6600\\', \\'#FF6633\\', \\'#FF9900\\', \\'#FF9933\\', \\'#FFCC00\\', \\'#FFCC33\\'];\\n/**\\n * Load `namespaces`.\\n *\\n * @return {String} returns the debug modes\\n * @api private\\n */\\n\\nfunction loadBrowser() {\\n  var namespaces;\\n\\n  try {\\n    namespaces = localStorage.getItem(\\'debug\\');\\n  } catch (error) {// Swallow\\n    // XXX (@Qix-) should we be logging these?\\n  } // If debug isn\\'t set in LS, and we\\'re in Electron, try to load $DEBUG\\n\\n\\n  if (!namespaces && typeof process !== \\'undefined\\' && \\'env\\' in process) {\\n    namespaces = process.env.DEBUG;\\n  }\\n\\n  return {\\n    namespaces: namespaces || \\'\\',\\n    colors: browserColors,\\n    useColors: true,\\n    formatArgs: formatBrowserArgs\\n  };\\n}\\n/**\\n * Load `namespaces`.\\n *\\n * @return {String} returns the debug modes\\n * @api private\\n */\\n\\n\\nfunction loadNode() {\\n  return {\\n    namespaces: process.env.DEBUG || \\'\\',\\n    colors: [6, 2, 3, 4, 5, 1],\\n    useColors: true,\\n    formatArgs: formatNodeArgs\\n  };\\n}\\n\\nfunction createLogger() {\\n  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\\n  var config = arguments.length > 1 ? arguments[1] : undefined;\\n  return function () {\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    if (prefix) {\\n      args.unshift(prefix);\\n    } // Create a namespace regex for each namespace\\n\\n\\n    var matches = config.namespaces.split(\\',\\').map(function (namespace) {\\n      // Remove wildcard and add to regex if wildcard\\n      if (namespace[namespace.length - 1] === \\'*\\') {\\n        return new RegExp(\\'^\\' + namespace.slice(0, namespace.length - 1) + \\'.*\\' + \\'$\\');\\n      }\\n\\n      return new RegExp(\\'^\\' + namespace + \\'$\\');\\n    }); // Does the prefix match a namespace\\n\\n    var match = matches.some(function (regex) {\\n      return regex.test(prefix);\\n    });\\n    var conf = {\\n      color: selectColor(prefix, config.colors),\\n      namespace: prefix,\\n      useColors: config.useColors\\n    };\\n\\n    if ( true && match) {\\n      var _console;\\n\\n      config.formatArgs(args, conf);\\n\\n      (_console = console).log.apply(_console, args);\\n    }\\n  };\\n}\\n\\nfunction nodeLogger(prefix) {\\n  return createLogger(prefix, loadNode());\\n}\\n\\nfunction browserLogger(prefix) {\\n  return createLogger(prefix, loadBrowser());\\n}\\n/**\\n * Detect Electron renderer / nwjs process, which is node, but we should\\n * treat as a browser.\\n */\\n\\n\\nif (typeof process === \\'undefined\\' || process.type === \\'renderer\\' || process.browser === true || process.__nwjs) {\\n  module.exports = browserLogger;\\n} else {\\n  module.exports = nodeLogger;\\n}\\n});\\n\\nvar debug$1 = debug(\\'informed:ObjMap\\' + \\'\\\\t\\');\\n/* -------------------- toPath -------------------- */\\n\\nvar ldtoPath = function ldtoPath() {\\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \\'\\';\\n  return String.prototype.replace.call(path, /\\\\[\\'(.+?)\\'\\\\]/g, \\'.$1\\').split(/[,[\\\\].]+?/).filter(Boolean);\\n};\\n/* --------------------- get --------------------- */\\n\\n\\nvar ldget = function ldget(obj) {\\n  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \\'\\';\\n  var defaultValue = arguments.length > 2 ? arguments[2] : undefined;\\n  var result = String.prototype.replace.call(path, /\\\\[\\'(.+?)\\'\\\\]/g, \\'.$1\\').split(/[,[\\\\].]+?/).filter(Boolean).reduce(function (res, key) {\\n    return res !== null && res !== undefined ? res[key] : res;\\n  }, obj);\\n  return result === undefined || result === obj ? defaultValue : result;\\n};\\n/* --------------------- has --------------------- */\\n// foo --\\x3e\\n// foo.bar --\\x3e foo\\n// foo.bar[3] --\\x3e foo.bar\\n// foo.bar.baz[2].raz.taz[5].laz --\\x3e foo.bar.baz[2].raz.taz[5]\\n\\n\\nvar parentPath = function parentPath(path) {\\n  return \".\".concat(path).replace(/(.*)[.[].*/, \\'$1\\').replace(/\\\\./, \\'\\');\\n}; // foo --\\x3e foo\\n// foo.bar --\\x3e bar\\n// foo.bar[3] --\\x3e [3]\\n// foo.bar.baz[2].raz.taz[5].laz --\\x3e laz\\n\\n\\nvar pathKey = function pathKey(path) {\\n  return path.replace(parentPath(path), \\'\\').replace(/\\\\./, \\'\\');\\n};\\n\\nvar ldhas = function ldhas(obj, path) {\\n  var pPath = parentPath(path);\\n  var key = pathKey(path); // If we have parent path then get the object at that location\\n  // .. otherwise its the root object\\n\\n  var parentObj = pPath ? get(obj, pPath) : obj; // If its [3] turn key into 3\\n\\n  return !!(parentObj && Object.hasOwnProperty.call(parentObj, key.replace(/\\\\[(.*)\\\\]/, \\'$1\\')));\\n};\\n/* --------------------- set --------------------- */\\n\\n\\nvar ldset = function ldset(obj) {\\n  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \\'\\';\\n  var val = arguments.length > 2 ? arguments[2] : undefined;\\n  String.prototype.replace.call(path, /\\\\[\\'(.+?)\\'\\\\]/g, \\'.$1\\').split(/[,[\\\\].]+?/).filter(Boolean).reduce(function (res, key, i, arr) {\\n    //console.log(\\'RES\\', res, \\'Key\\', key, \\'I\\', i, \\'Arr\\', arr, \\'OBJ\\', obj);\\n    // At the leaf set the value\\n    if (i === arr.length - 1) {\\n      res[key] = val;\\n      return res[key];\\n    } // Initialize to new array or object if needed\\n\\n\\n    if (res[key] === undefined) {\\n      if (Number.isInteger(+arr[i + 1])) {\\n        res[key] = [];\\n      } else {\\n        res[key] = {};\\n      }\\n\\n      return res[key];\\n    } // Exception for if the value is changeing to an array\\n\\n\\n    if (Number.isInteger(+arr[i + 1]) && !Array.isArray(res[key])) {\\n      res[key] = [];\\n    } //TODO exception for if object ??\\n    // Otherwise keep whats there\\n\\n\\n    return res[key];\\n  }, obj);\\n};\\n/* --------------------- unset --------------------- */\\n\\n\\nvar ldunset = function ldunset(obj) {\\n  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \\'\\';\\n  var found = false;\\n  String.prototype.replace.call(path, /\\\\[\\'(.+?)\\'\\\\]/g, \\'.$1\\').split(/[,[\\\\].]+?/).filter(Boolean).reduce(function (res, key, i, arr) {\\n    // Base case res is undefined\\n    if (res === undefined) {\\n      return res;\\n    } // At the leaf delete the value\\n\\n\\n    if (i === arr.length - 1) {\\n      delete res[key];\\n      found = true;\\n      return res[key];\\n    } // Otherwise keep going\\n\\n\\n    return res[key];\\n  }, obj);\\n  return found;\\n};\\n/* --------------------- pullAt --------------------- */\\n\\n\\nvar ldpullAt = function ldpullAt(obj) {\\n  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \\'\\';\\n  var pulled;\\n  String.prototype.replace.call(path, /\\\\[\\'(.+?)\\'\\\\]/g, \\'.$1\\').split(/[,[\\\\].]+?/).filter(Boolean).reduce(function (res, key, i, arr) {\\n    // Base case res is undefined\\n    if (res === undefined) {\\n      return res;\\n    } // At the leaf delete the value\\n\\n\\n    if (i === arr.length - 1 && Array.isArray(res)) {\\n      // Pull out one value at index ( key )\\n      pulled = res.splice(key, 1);\\n      return res[key];\\n    } // Otherwise keep going\\n\\n\\n    return res[key];\\n  }, obj);\\n  return pulled;\\n};\\n/* --------------------- values --------------------- */\\n\\n\\nvar ldvalues = function ldvalues() {\\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n  var props = Object.keys(obj);\\n  return props.map(function (key) {\\n    return obj[key];\\n  });\\n};\\n\\nvar pathToArrayElem = function pathToArrayElem(path) {\\n  var pathArray = ldtoPath(path);\\n  return Number.isInteger(+pathArray[pathArray.length - 1]);\\n};\\n\\nvar ObjectMap = /*#__PURE__*/function () {\\n  function ObjectMap() {\\n    _classCallCheck(this, ObjectMap);\\n  }\\n\\n  _createClass(ObjectMap, null, [{\\n    key: \"empty\",\\n    value: function empty(object) {\\n      return ldvalues(object).length === 0;\\n    }\\n  }, {\\n    key: \"get\",\\n    value: function get(object, path) {\\n      var val = ldget(object, path); //debug(\\'GOT\\', path, val);\\n\\n      return val;\\n    }\\n  }, {\\n    key: \"has\",\\n    value: function has(object, path) {\\n      return ldhas(object, path);\\n    }\\n  }, {\\n    key: \"set\",\\n    value: function set(object, path, value) {\\n      if (value !== undefined) {\\n        debug$1(\\'SETTING\\', path, value);\\n        ldset(object, path, value);\\n      } else {\\n        // Setting things to undefined in informed is special!\\n        // so in this else statement we deal with that\\n        // If the path is to an array leaf then we want to set to undefined\\n        // Example:\\n        // path = \\'foo.bar[2]\\'\\n        // foo.bar = [ \\'baz\\', \\'raz\\', \\'taz\\' ]\\n        // setting taz to undefined   ^^^\\n        if (pathToArrayElem(path) && ObjectMap.get(object, path) !== undefined) {\\n          debug$1(\\'Special case SETTING\\', path, \\'to undefined\\');\\n          ldset(object, path, undefined);\\n          var pathArray = ldtoPath(path);\\n          pathArray = pathArray.slice(0, pathArray.length - 1);\\n          cleanup(object, pathArray);\\n        } // Only delete the field if it needs to be deleted and its not a path to an array ( array leaf )\\n        // Example:\\n        // path = \\'foo.bar\\'\\n        // foo.bar = \\'baz\\'\\n        // removing foo.bar from the object completley\\n        else if (!pathToArrayElem(path) && ObjectMap.get(object, path) !== undefined) {\\n            debug$1(\\'Special case REMOVING\\', path, \\'from object completley\\');\\n            ObjectMap[\"delete\"](object, path);\\n          }\\n      }\\n    }\\n  }, {\\n    key: \"delete\",\\n    value: function _delete(object, path) {\\n      debug$1(\\'DELETE\\', path); // Special case for arrays\\n\\n      if (pathToArrayElem(path)) {\\n        debug$1(\\'ARRAY\\', path); //ldunset(object, path);\\n\\n        this.pullOut(object, path);\\n      } else {\\n        ldunset(object, path);\\n      }\\n\\n      var pathArray = ldtoPath(path);\\n      pathArray = pathArray.slice(0, pathArray.length - 1);\\n      cleanup(object, pathArray);\\n    } // Very important ;)\\n\\n  }, {\\n    key: \"pullOut\",\\n    value: function pullOut(object, path) {\\n      // Get the path to the array\\n      var pathArray = ldtoPath(path); // debug(\\'PathArray1\\', pathArray);\\n\\n      var index = pathArray[pathArray.length - 1];\\n      pathArray = pathArray.slice(0, pathArray.length - 1);\\n      debug$1(\\'Pulling out:\\', pathArray, \\'index\\', index); // Get the array\\n\\n      var arr = ldget(object, pathArray);\\n      debug$1(\\'Array\\', arr); // Pull out of array\\n\\n      if (Array.isArray(arr)) {\\n        ldpullAt(arr, index);\\n      }\\n\\n      cleanup(object, pathArray);\\n    }\\n  }]);\\n\\n  return ObjectMap;\\n}();\\n\\nfunction cleanup(obj, path) {\\n\\n  // Base case no path left\\n  if (path.length === 0) {\\n    return;\\n  }\\n\\n  var object = ldget(obj, path); // Clean up undefined from array\\n  // if (Array.isArray(object) && pull) {\\n  //   ldpull(object, undefined);\\n  // }\\n  // Delete object if its empty\\n\\n  if (Array.isArray(object) ? object.every(function (e) {\\n    return e == null;\\n  }) : JSON.stringify(object) === \\'{}\\') {\\n    ldunset(obj, path);\\n  } // Recur\\n\\n\\n  cleanup(obj, path.slice(0, path.length - 1));\\n}\\n\\nvar FormRegisterContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext({\\n  register: function register() {},\\n  deregister: function deregister() {},\\n  setValue: function setValue() {},\\n  setTouched: function setTouched() {},\\n  setError: function setError() {},\\n  update: function update() {},\\n  getField: function getField() {},\\n  expectRemoval: function expectRemoval() {},\\n  getInitialValue: function getInitialValue() {}\\n});\\nvar FormStateContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext({});\\nvar FormApiContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext({\\n  getFullField: function getFullField() {},\\n  getValues: function getValues() {},\\n  getOptions: function getOptions() {\\n    return {};\\n  },\\n  setInitialValue: function setInitialValue() {},\\n  getInitialValue: function getInitialValue() {},\\n  getDerrivedValue: function getDerrivedValue() {},\\n  getSavedValue: function getSavedValue() {},\\n  removeSavedState: function removeSavedState() {}\\n});\\nvar GroupContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext();\\nvar ArrayFieldStateContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext();\\nvar ArrayFieldApiContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext();\\nvar ArrayFieldItemApiContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext();\\nvar ArrayFieldItemStateContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext();\\nvar MultistepStateContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext();\\nvar MultistepApiContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext();\\nvar MultistepStepContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext();\\n\\nfunction useFormApi() {\\n  var formApi = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useContext\"])(FormApiContext);\\n  return formApi;\\n}\\n\\n// https://github.com/facebook/react/issues/14543\\n\\nfunction useStateWithGetter(initial) {\\n  var ref = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\\n  var mounted = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(true);\\n\\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(initial),\\n      _useState2 = _slicedToArray(_useState, 2),\\n      state = _useState2[0],\\n      setState = _useState2[1];\\n\\n  ref.current = state;\\n\\n  var set = function set(value) {\\n    ref.current = value;\\n    if (mounted.current) setState(value);\\n  };\\n\\n  var get = function get() {\\n    return ref.current;\\n  };\\n\\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\\n    return function () {\\n      mounted.current = false;\\n    };\\n  }, []);\\n  return [state, set, get];\\n}\\n\\nvar getChildDisplayName = function getChildDisplayName(WrappedComponent) {\\n  // fix for \"memo\" components\\n  if (WrappedComponent.type && WrappedComponent.type.name) {\\n    return WrappedComponent.type.name;\\n  }\\n\\n  return WrappedComponent.displayName || WrappedComponent.name || \\'Component\\';\\n};\\nvar yupToFormErrors = function yupToFormErrors(yupError) {\\n  var errors = {};\\n\\n  if (yupError.inner) {\\n    if (yupError.inner.length === 0) {\\n      // console.log(yupError.path);\\n      ObjectMap.set(errors, yupError.path, yupError.message);\\n      return;\\n    }\\n\\n    var _iterator = _createForOfIteratorHelper(yupError.inner),\\n        _step;\\n\\n    try {\\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\\n        var err = _step.value;\\n\\n        if (!ObjectMap.get(errors, err.path)) {\\n          // console.log(errors, err.path, err.message);\\n          ObjectMap.set(errors, err.path, err.message);\\n        }\\n      }\\n    } catch (err) {\\n      _iterator.e(err);\\n    } finally {\\n      _iterator.f();\\n    }\\n  }\\n\\n  return errors;\\n};\\nvar validateYupSchema = function validateYupSchema(schema, values) {\\n  try {\\n    schema.validateSync(values, {\\n      abortEarly: false\\n    });\\n  } catch (e) {\\n    var formErrors = yupToFormErrors(e);\\n    return formErrors;\\n  }\\n};\\nvar yupToFormError = function yupToFormError(yupError) {\\n  if (yupError.inner) {\\n    if (yupError.inner.length === 0) {\\n      return;\\n    }\\n\\n    var err = yupError.inner[0];\\n    return err.message;\\n  }\\n};\\nvar validateYupField = function validateYupField(schema, value) {\\n  try {\\n    schema.validateSync(value, {\\n      abortEarly: false\\n    });\\n  } catch (e) {\\n    return yupToFormError(e);\\n  }\\n};\\nvar validateAjvSchema = function validateAjvSchema(validate, data) {\\n  validate(data);\\n  var errors = {};\\n\\n  if (validate.errors) {\\n    validate.errors.forEach(function (_ref) {\\n      var message = _ref.message,\\n          dataPath = _ref.dataPath,\\n          keyword = _ref.keyword,\\n          params = _ref.params;\\n      var path = dataPath; // Special case for required\\n\\n      if (keyword === \\'required\\') {\\n        path = \"\".concat(path, \".\").concat(params.missingProperty);\\n      } // Get rid of leading dot\\n\\n\\n      path = path.replace(\\'.\\', \\'\\'); // console.log(\\'PATH\\', path, message);\\n      // TODO get message from informed if present\\n\\n      ObjectMap.set(errors, path, message);\\n    });\\n  }\\n\\n  return errors;\\n}; // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\\n\\nvar uuidv4 = function uuidv4() {\\n  return \\'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\\'.replace(/[xy]/g, function (c) {\\n    var r = Math.random() * 16 | 0,\\n        v = c == \\'x\\' ? r : r & 0x3 | 0x8;\\n    return v.toString(16);\\n  });\\n};\\nvar computeFieldFromProperty = function computeFieldFromProperty(propertyName, property, prefix) {\\n  var uiControl = property[\\'ui:control\\'],\\n      informedProps = property[\\'informed:props\\'],\\n      inputProps = property[\\'input:props\\'],\\n      uiBefore = property[\\'ui:before\\'],\\n      uiAfter = property[\\'ui:after\\'],\\n      oneOf = property.oneOf,\\n      items = property.items,\\n      schemaEnum = property[\"enum\"],\\n      label = property.title,\\n      min = property.minimum,\\n      max = property.maximum,\\n      minLength = property.minLength,\\n      maxLength = property.maxLength,\\n      pattern = property.pattern,\\n      type = property.type,\\n      subProperties = property.properties; // Set Id if not passed\\n\\n  var id = uuidv4();\\n\\n  if (inputProps && inputProps.id) {\\n    id = inputProps.id;\\n  }\\n\\n  var field = {\\n    componentType: uiControl,\\n    field: prefix ? \"\".concat(prefix, \".\").concat(propertyName) : propertyName,\\n    type: type,\\n    uiBefore: uiBefore,\\n    uiAfter: uiAfter,\\n    properties: type === \\'object\\' ? subProperties : undefined,\\n    items: type === \\'array\\' ? items : undefined,\\n    props: _objectSpread2(_objectSpread2({\\n      label: label,\\n      id: id,\\n      min: min,\\n      max: max,\\n      minLength: minLength,\\n      maxLength: maxLength,\\n      pattern: pattern\\n    }, informedProps), inputProps)\\n  };\\n\\n  if (oneOf) {\\n    var options = property.oneOf.map(function (option) {\\n      var _option$inputProps = option[\\'input:props\\'],\\n          inputProps = _option$inputProps === void 0 ? {} : _option$inputProps;\\n      return _objectSpread2({\\n        value: option[\"const\"],\\n        label: option.title\\n      }, inputProps);\\n    });\\n    field.props.options = options;\\n  }\\n\\n  if (schemaEnum) {\\n    var _options = property[\"enum\"].map(function (val) {\\n      return {\\n        value: val,\\n        label: val\\n      };\\n    });\\n\\n    field.props.options = _options;\\n  }\\n\\n  if (items && items.oneOf) {\\n    var _options2 = items.oneOf.map(function (option) {\\n      var _option$inputProps2 = option[\\'input:props\\'],\\n          inputProps = _option$inputProps2 === void 0 ? {} : _option$inputProps2;\\n      return _objectSpread2({\\n        value: option[\"const\"],\\n        label: option.title\\n      }, inputProps);\\n    });\\n\\n    field.props.options = _options2;\\n  }\\n\\n  return field;\\n};\\nvar computeFieldsFromSchema = function computeFieldsFromSchema(schema, onlyValidateSchema, prefix) {\\n  if (!schema || onlyValidateSchema) {\\n    return [];\\n  } // Grab properties and items off of schema\\n\\n\\n  var _schema$properties = schema.properties,\\n      properties = _schema$properties === void 0 ? {} : _schema$properties,\\n      allOf = schema.allOf,\\n      _schema$propertyOrder = schema.propertyOrder,\\n      propertyOrder = _schema$propertyOrder === void 0 ? [] : _schema$propertyOrder;\\n\\n  if (Object.keys(properties).length > 0) {\\n    // Attempt to generate fields from properties\\n    var fields = Object.keys(properties).sort(function (a, b) {\\n      var aIndex = propertyOrder.indexOf(a);\\n      var bIndex = propertyOrder.indexOf(b);\\n      return (aIndex > -1 ? aIndex : propertyOrder.length + 1) - (bIndex > -1 ? bIndex : propertyOrder.length + 1);\\n    }).map(function (propertyName) {\\n      var property = properties[propertyName];\\n      var field = computeFieldFromProperty(propertyName, property, prefix);\\n      return field;\\n    }); // Check for all of ( we have conditionals )\\n\\n    if (allOf) {\\n      fields.push({\\n        componentType: \\'conditionals\\',\\n        // Each element of the \"allOf\" array is a conditional\\n        allOf: allOf\\n      });\\n    }\\n\\n    return fields;\\n  }\\n\\n  return [];\\n}; // Examples\\n// field = \"name\" ---\\x3e properties.name\\n// field = \"brother.name\" ---\\x3e properties.brother.properties.name\\n// field = \"brother.siblings[1].friend.name\" ---\\x3e properties.brother.properties.siblings.items[1].properties.friend.properties.name\\n\\nvar getSchemaPathFromJsonPath = function getSchemaPathFromJsonPath(jsonPath) {\\n  // Convert\\n  var schemaPath = jsonPath.replace(/\\\\./g, \\'.properties.\\').replace(/\\\\[/g, \\'.itmes[\\'); // Add first properties\\n\\n  schemaPath = \"properties.\".concat(schemaPath);\\n  return schemaPath;\\n};\\n/* -------------------------- Formatter ----------------------------- */\\n\\nvar getFormatter = function getFormatter(formatter, value) {\\n  // If mask is a string turn it into an array;\\n  if (typeof formatter === \\'string\\') {\\n    return formatter.split(\\'\\').map(function (_char) {\\n      if (_char === \\'#\\') {\\n        return /\\\\d/;\\n      }\\n\\n      if (_char === \\'*\\') {\\n        return /[\\\\w]/;\\n      }\\n\\n      return _char;\\n    });\\n  } // If mask is a function use it to genreate current mask\\n\\n\\n  if (typeof formatter === \\'function\\') {\\n    return formatter(value);\\n  }\\n\\n  if (Array.isArray(formatter)) {\\n    return formatter;\\n  } // Should never make it here throw\\n\\n\\n  throw new Error(\\'Formatter must be string, array, or function\\');\\n};\\n\\nvar matchingIndex = function matchingIndex(a, b) {\\n  var i = 0;\\n  var mi = -1;\\n  var matching = true; // a = \"+1 \"\\n  // b = \"+12\"\\n\\n  while (matching && i < a.length) {\\n    if (a[i] == b[i]) {\\n      mi = i;\\n    } else {\\n      matching = false;\\n    }\\n\\n    i = i + 1;\\n  }\\n\\n  return mi;\\n};\\n\\nvar informedFormat = function informedFormat(value, frmtr) {\\n  // console.log(\\'Formatting\\', value);\\n  // Null check\\n  if (!value) {\\n    return {\\n      value: value,\\n      offset: 0\\n    };\\n  } // Generate formatter array\\n\\n\\n  var formatter = getFormatter(frmtr, value); // Start to fill in the array\\n  // Example: phone formatter\\n  // formatter =[\\'+\\', \\'1\\', \\' \\', /\\\\d/, /\\\\d/, /\\\\d/, \\'-\\', /\\\\d/, /\\\\d/, /\\\\d/, \\'-\\', /\\\\d/, /\\\\d/, /\\\\d/, /\\\\d/]\\n  // value examples:\\n  // \"1231231234 ----\\x3e +1 123-123-1234\\n  // \"+\" \\t\\t\\t\\t ----\\x3e +\\n  // \"+1\" \\t\\t\\t ----\\x3e +1\\n  // \"+2\"\\t\\t\\t\\t ----\\x3e +1 2\\n  // \"1\"\\t\\t\\t\\t ----\\x3e +1 1\\n  // \"1234\"\\t\\t\\t ----\\x3e +1 123-4\\n  // \"123a\"      ----\\x3e +1 123\\n  // Determine prefix length and suffix start\\n\\n  var prefixLength = formatter.findIndex(function (v) {\\n    return typeof v != \\'string\\';\\n  });\\n\\n  var suffixStart = formatter.length - _toConsumableArray(formatter).reverse().findIndex(function (v) {\\n    return typeof v != \\'string\\';\\n  }); // Formatted value\\n\\n\\n  var formatted = []; // The characters from the current value\\n\\n  var chars = value.split(\\'\\'); // To track the value index during itteration\\n\\n  var vIndex = 0;\\n  var start = 0; // If the value matches part of the prefix take it out\\n  // Example prefix = \"+1 \" value = [\"+1 123-123-1234\", \"+12\", \"+2\"]\\n\\n  var matchIndex = matchingIndex(formatter.slice(0, prefixLength), chars.slice(0, prefixLength)); // console.log(\\'Matching index\\', matchIndex);\\n\\n  if (matchIndex > -1) {\\n    //vIndex = prefixLength;\\n    vIndex = matchIndex + 1;\\n    formatted = formatted.concat(formatter.slice(0, matchIndex + 1));\\n    start = matchIndex + 1;\\n  } // Example prefix = \"+1 \" value=[\"1\", \"1234\"]\\n\\n\\n  if (matchIndex < 0) {\\n    // Start past the prefix\\n    formatted = formatted.concat(formatter.slice(0, prefixLength));\\n    start = prefixLength;\\n  } // console.log(\\'start\\', start, formatted);\\n\\n  for (var i = start; i < formatter.length; i++) {\\n    // Get current formatter location matcher\\n    var matcher = formatter[i]; // We get past the prefix if matcher is not a string\\n\\n\\n    if (vIndex != chars.length) {\\n      // Get the current value character\\n      var curChar = chars[vIndex]; // If type is string normal compare otherwise regex compare\\n\\n      var match = typeof matcher === \\'string\\' ? matcher === curChar : matcher.test(curChar); // If the current character of the value matches and matcher is a string\\n      // \"1\" === \"1\"\\n\\n      if (match && typeof matcher === \\'string\\') {\\n        formatted.push(matcher); //if( pastPrefix ){\\n\\n        vIndex = vIndex + 1; //}\\n      } // If the current character does not match and matcher is a stirng\\n      // \"1\" != \"+\"\\n      else if (!match && typeof matcher === \\'string\\') {\\n          // Special check for 123a ---\\x3e dont want \"+1 123-\"\\n          // Special check for 1234 ---\\x3e DO want \"+1 123-4\"\\n          if (vIndex != chars.length) formatted.push(matcher);\\n        } // If the current character matches and the matcher is not a string\\n        // /\\\\d/.test(\"2\")\\n        else if (match && typeof matcher != \\'string\\') {\\n            formatted.push(curChar);\\n            vIndex = vIndex + 1;\\n          } // If the current character does NOT match and the matecer is regex\\n          // /\\\\d/.test(\"a\")\\n          else if (!match && typeof matcher != \\'string\\') {\\n              // Throw out this value\\n              vIndex = vIndex + 1;\\n              i = i - 1;\\n            }\\n    } else {\\n      // If mattcher is a string and we are at suffix keep going\\n      if (typeof matcher === \\'string\\' && i >= suffixStart) {\\n        formatted.push(matcher);\\n      } else {\\n        // Otherwise we want to break out\\n        break;\\n      }\\n    }\\n  }\\n\\n  return {\\n    value: formatted.join(\\'\\'),\\n    offset: value ? formatted.length - value.length : 0\\n  };\\n};\\n\\n// To get around it, we can conditionally useEffect on the server (no-op) and\\n// useLayoutEffect in the browser.\\n// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\\n\\nvar useIsomorphicLayoutEffect = typeof window !== \\'undefined\\' && typeof window.document !== \\'undefined\\' && typeof window.document.createElement !== \\'undefined\\' ? react__WEBPACK_IMPORTED_MODULE_0__[\"useLayoutEffect\"] : react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"];\\n\\nvar logger = debug(\\'informed:useField\\' + \\'\\\\t\\'); // localStorage.debug = \\'informed:.*\\' << HOW to enable debuging\\n\\nvar initializeValue = function initializeValue(value, mask, formatter, parser) {\\n  if (value != null) {\\n    // Call mask if it was passed\\n    if (mask) {\\n      return mask(value);\\n    }\\n\\n    if (formatter && !parser) {\\n      var res = informedFormat(value, formatter);\\n      return res.value;\\n    }\\n\\n    return value;\\n  } // Not needed but called out specifically\\n\\n\\n  return undefined;\\n};\\n\\nvar initializeMask = function initializeMask(value, format, parse, formatter) {\\n  // Call format and parse if they were passed\\n  if (format && parse) {\\n    return format(value);\\n  } // Call formatter\\n\\n\\n  if (formatter) {\\n    var res = informedFormat(value, formatter);\\n    return res.value;\\n  }\\n\\n  return value;\\n};\\n\\nvar generateValidationFunction = function generateValidationFunction(validationFunc, validationSchema, _ref) {\\n  var required = _ref.required;\\n\\n  // We dont want a validation function if there was nothing passed\\n  if (validationFunc || validationSchema) {\\n    return function (val, values) {\\n      if (validationSchema) {\\n        return validateYupField(validationSchema, val);\\n      }\\n\\n      if (validationFunc) {\\n        return validationFunc(val, values);\\n      }\\n    };\\n  }\\n\\n  if (required) {\\n    return function (val) {\\n      return validateRequired(val, required);\\n    };\\n  }\\n};\\n\\nvar generateOnChange = function generateOnChange(_ref2) {\\n  var fieldType = _ref2.fieldType,\\n      setValue = _ref2.setValue,\\n      onChange = _ref2.onChange,\\n      multiple = _ref2.multiple,\\n      ref = _ref2.ref;\\n\\n  var setter = function setter(val) {\\n    return setValue(val);\\n  };\\n\\n  if (fieldType === \\'text\\' || fieldType === \\'textArea\\' || fieldType === \\'number\\') {\\n    setter = function setter(e) {\\n      return setValue(e.target.value, e);\\n    };\\n  }\\n\\n  if (fieldType === \\'select\\') {\\n    setter = function setter() {\\n      var selected = Array.from(ref.current).filter(function (option) {\\n        return option.selected;\\n      }).map(function (option) {\\n        return option.value;\\n      });\\n      setValue(multiple ? selected : selected[0] || \\'\\');\\n    };\\n  }\\n\\n  if (fieldType === \\'checkbox\\') {\\n    setter = function setter(e) {\\n      setValue(e.target.checked);\\n\\n      if (onChange) {\\n        onChange(e);\\n      }\\n    };\\n  }\\n\\n  return function (val) {\\n    setter(val);\\n\\n    if (onChange) {\\n      onChange(val);\\n    }\\n  };\\n};\\n\\nvar generateOnBlur = function generateOnBlur(_ref3) {\\n  var setTouched = _ref3.setTouched,\\n      onBlur = _ref3.onBlur;\\n  return function (e) {\\n    setTouched(true);\\n\\n    if (onBlur) {\\n      onBlur(e);\\n    }\\n  };\\n};\\n\\nvar generateValue = function generateValue(_ref4) {\\n  var fieldType = _ref4.fieldType,\\n      maskedValue = _ref4.maskedValue,\\n      multiple = _ref4.multiple,\\n      value = _ref4.value;\\n\\n  switch (fieldType) {\\n    case \\'text\\':\\n    case \\'number\\':\\n      return !maskedValue && maskedValue !== 0 ? \\'\\' : maskedValue;\\n\\n    case \\'textArea\\':\\n      return !maskedValue ? \\'\\' : maskedValue;\\n\\n    case \\'select\\':\\n      return value || (multiple ? [] : \\'\\');\\n\\n    case \\'checkbox\\':\\n      return !!value;\\n\\n    default:\\n      return value;\\n  }\\n};\\n\\nvar generateFieldType = function generateFieldType(fieldType) {\\n  switch (fieldType) {\\n    case \\'text\\':\\n      return fieldType;\\n\\n    case \\'number\\':\\n      return fieldType;\\n\\n    case \\'checkbox\\':\\n      return fieldType;\\n\\n    default:\\n      return;\\n  }\\n};\\n\\nvar validateRequired = function validateRequired(value, required) {\\n  if (required && (value == null || value === \\'\\')) {\\n    return typeof required === \\'string\\' ? required : \\'This field is required\\';\\n  }\\n};\\n\\nfunction useField() {\\n  var fieldProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n  var userRef = arguments.length > 1 ? arguments[1] : undefined;\\n\\n  // Pull props off of field props\\n  var field = fieldProps.field,\\n      validationFunc = fieldProps.validate,\\n      asyncValidate = fieldProps.asyncValidate,\\n      validationSchema = fieldProps.validationSchema,\\n      mask = fieldProps.mask,\\n      maskWithCursorOffset = fieldProps.maskWithCursorOffset,\\n      format = fieldProps.format,\\n      parse = fieldProps.parse,\\n      formatter = fieldProps.formatter,\\n      parser = fieldProps.parser,\\n      initialValue = fieldProps.initialValue,\\n      validateOnChange = fieldProps.validateOnChange,\\n      validateOnBlur = fieldProps.validateOnBlur,\\n      validateOnMount = fieldProps.validateOnMount,\\n      asyncValidateOnBlur = fieldProps.asyncValidateOnBlur,\\n      maskOnBlur = fieldProps.maskOnBlur,\\n      allowEmptyString = fieldProps.allowEmptyString,\\n      onValueChange = fieldProps.onValueChange,\\n      notify = fieldProps.notify,\\n      keepState = fieldProps.keepState,\\n      maintainCursor = fieldProps.maintainCursor,\\n      debug = fieldProps.debug,\\n      shadow = fieldProps.shadow,\\n      step = fieldProps.step,\\n      fieldType = fieldProps.fieldType,\\n      multiple = fieldProps.multiple,\\n      onChange = fieldProps.onChange,\\n      onBlur = fieldProps.onBlur,\\n      formController = fieldProps.formController,\\n      userRelevant = fieldProps.relevant,\\n      required = fieldProps.required,\\n      keepStateIfRelevant = fieldProps.keepStateIfRelevant,\\n      userProps = _objectWithoutProperties(fieldProps, [\"field\", \"validate\", \"asyncValidate\", \"validationSchema\", \"mask\", \"maskWithCursorOffset\", \"format\", \"parse\", \"formatter\", \"parser\", \"initialValue\", \"validateOnChange\", \"validateOnBlur\", \"validateOnMount\", \"asyncValidateOnBlur\", \"maskOnBlur\", \"allowEmptyString\", \"onValueChange\", \"notify\", \"keepState\", \"maintainCursor\", \"debug\", \"shadow\", \"step\", \"fieldType\", \"multiple\", \"onChange\", \"onBlur\", \"formController\", \"relevant\", \"required\", \"keepStateIfRelevant\"]); // Create ref to a field id\\n\\n\\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(uuidv4()),\\n      _useState2 = _slicedToArray(_useState, 1),\\n      fieldId = _useState2[0]; // Grab the form register context\\n\\n\\n  var updater = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useContext\"])(FormRegisterContext); // Grab multistepContext\\n\\n  var multistepContext = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useContext\"])(MultistepStepContext);\\n  var inMultistep = multistepContext || keepStateIfRelevant; // Grab the form api\\n\\n  var formApi = useFormApi(); // Create ref to fieldApi\\n\\n  var fieldApiRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(); // Create initial render ref\\n\\n  var initialRenerRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(true); // Create ref to fieldObject\\n\\n  var fieldObjectRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(); // If the form Controller was passed in then use that instead\\n\\n  if (formController) {\\n    updater = formController.updater;\\n    formApi = formController.getFormApi();\\n  } // Generate validation function\\n\\n\\n  var validate = generateValidationFunction(validationFunc, validationSchema, {\\n    required: required\\n  }); // Grab possible initial value from form\\n\\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(function () {\\n    return updater.getInitialValue(field);\\n  }),\\n      _useState4 = _slicedToArray(_useState3, 1),\\n      formInitialValue = _useState4[0]; // We might have keep state so check for it!\\n\\n\\n  var savedState = formApi.getSavedValue(field); // Create Initial Values\\n\\n  var initVal;\\n  var initTouched; // We do these checks because initial value could be false or zero!!\\n\\n  if ((keepState || inMultistep) && savedState) {\\n    logger(\"Setting field \".concat(name, \"\\'s kept state\"), savedState);\\n    initVal = savedState.value;\\n    initTouched = savedState.touched; // Remove the saved state\\n\\n    formApi.removeSavedState(name);\\n  } else if (initialValue != undefined) {\\n    initVal = initialValue;\\n  } else {\\n    initVal = formInitialValue;\\n  } // Initialize state\\n\\n\\n  var _useStateWithGetter = useStateWithGetter(initializeValue(initVal, mask, formatter, parser)),\\n      _useStateWithGetter2 = _slicedToArray(_useStateWithGetter, 3),\\n      value = _useStateWithGetter2[0],\\n      setVal = _useStateWithGetter2[1],\\n      getTheVal = _useStateWithGetter2[2];\\n\\n  var _useStateWithGetter3 = useStateWithGetter(validateOnMount ? validate(value) : undefined),\\n      _useStateWithGetter4 = _slicedToArray(_useStateWithGetter3, 3),\\n      error = _useStateWithGetter4[0],\\n      setErr = _useStateWithGetter4[1],\\n      getErr = _useStateWithGetter4[2];\\n\\n  var _useStateWithGetter5 = useStateWithGetter(initTouched),\\n      _useStateWithGetter6 = _slicedToArray(_useStateWithGetter5, 3),\\n      touched = _useStateWithGetter6[0],\\n      setTouch = _useStateWithGetter6[1],\\n      getTouch = _useStateWithGetter6[2];\\n  /* eslint-disable no-unused-vars */\\n\\n\\n  var _useStateWithGetter7 = useStateWithGetter(0),\\n      _useStateWithGetter8 = _slicedToArray(_useStateWithGetter7, 3),\\n      cursor = _useStateWithGetter8[0],\\n      setCursor = _useStateWithGetter8[1],\\n      getCursor = _useStateWithGetter8[2];\\n\\n  var _useStateWithGetter9 = useStateWithGetter(0),\\n      _useStateWithGetter10 = _slicedToArray(_useStateWithGetter9, 3),\\n      cursorOffset = _useStateWithGetter10[0],\\n      setCursorOffset = _useStateWithGetter10[1],\\n      getCursorOffset = _useStateWithGetter10[2];\\n\\n  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(function () {\\n    return initializeMask(value, format, parse, formatter);\\n  }),\\n      _useState6 = _slicedToArray(_useState5, 2),\\n      maskedValue = _useState6[0],\\n      setMaskedValue = _useState6[1]; // Create then update refs to props\\n\\n\\n  var initialValueRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(initialValue);\\n  var fieldRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(field);\\n  var prevFieldRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\\n  initialValueRef.current = initialValue;\\n  fieldRef.current = field; // Default relevant function\\n\\n  var relevantFunc = function relevantFunc() {\\n    return true;\\n  };\\n\\n  var relevant = function relevant(params) {\\n    var rel = userRelevant || relevantFunc;\\n    var ff = formApi.getFullField(fieldRef.current) || fieldRef.current;\\n    var args = {\\n      path: ff,\\n      parentPath: ff.replace(/(.*)[.[].*/, \\'$1\\'),\\n      get: function get(values, path) {\\n        return ObjectMap.get(values, path);\\n      }\\n    };\\n\\n    if (multistepContext && multistepContext.relevant) {\\n      return rel(params, args) && multistepContext.relevant(params, args);\\n    }\\n\\n    return rel(params, args);\\n  };\\n\\n  var _useStateWithGetter11 = useStateWithGetter(relevant(formApi.getValues())),\\n      _useStateWithGetter12 = _slicedToArray(_useStateWithGetter11, 3),\\n      isRelevant = _useStateWithGetter12[0],\\n      setIsRelevant = _useStateWithGetter12[1],\\n      getIsRelevant = _useStateWithGetter12[2];\\n\\n  var multistepRelevant = function multistepRelevant(params) {\\n    if (multistepContext && multistepContext.relevant) {\\n      return multistepContext.relevant(params);\\n    }\\n\\n    return true;\\n  };\\n\\n  var checkRelevant = function checkRelevant() {\\n    var newRel = relevant(formApi.getValues());\\n    var curRel = getIsRelevant();\\n\\n    if (newRel != curRel) {\\n      setIsRelevant(newRel);\\n    }\\n\\n    return newRel;\\n  };\\n\\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\\n    // Reset if we dont have keep state and relevance changed.\\n    if (!isRelevant && !keepState) {\\n      fieldApiRef.current.reset();\\n    }\\n  }, [isRelevant]); // Special getter to support shadow fields\\n\\n  var getVal = function getVal() {\\n    return shadow ? formApi.getDerrivedValue(field) : getTheVal();\\n  };\\n  /* ---------------------- Setters ---------------------- */\\n  // ---- Define set error ----\\n\\n\\n  var setError = function setError(val) {\\n    var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\\n        preventUpdate = _ref5.preventUpdate;\\n\\n    // For multistep forms always set error to undefined when not at that step\\n    if (step && formApi.getStep() < step) {\\n      logger(\"Setting \".concat(field, \"\\'s error to undefined as we are not at that step\"));\\n      setErr(undefined);\\n      updater.setError(fieldId, undefined, !preventUpdate);\\n    } else {\\n      logger(\"Setting \".concat(field, \"\\'s error to \").concat(val));\\n      setErr(val);\\n      updater.setError(fieldId, val, !preventUpdate);\\n    }\\n  }; // ---- Define set value ----\\n\\n\\n  var setValue = function setValue(val, e) {\\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\\n    logger(\"Setting \".concat(field, \" to \").concat(val)); // Get the most up to date options\\n\\n    var formOptions = formApi.getOptions(); // Initialize maked value\\n\\n    var maskedVal = val;\\n\\n    if (val === \\'\\' && !allowEmptyString && !options.allowEmptyString && !formOptions.allowEmptyStrings) {\\n      val = undefined;\\n    } // Turn string into number for number fields\\n\\n\\n    if ((fieldProps.type === \\'number\\' || fieldType === \\'number\\') && val !== undefined) {\\n      val = +val;\\n    } // Remember Cursor position!\\n\\n\\n    if (e && e.target && e.target.selectionStart) {\\n      setCursor(e.target.selectionStart);\\n    } // Call mask if it was passed\\n\\n\\n    if (mask && !maskOnBlur) {\\n      maskedVal = mask(val, getCursor());\\n      val = mask(val, getCursor());\\n    } // Call maskWithCursorOffset if it was passed\\n\\n\\n    if (maskWithCursorOffset && !maskOnBlur) {\\n      var res = maskWithCursorOffset(val, getCursor());\\n      maskedVal = res.value;\\n      val = res.value;\\n      setCursorOffset(res.offset);\\n    } // Call format and parse if they were passed\\n\\n\\n    if (format && parse) {\\n      // Masked value only differs from value when format and parse are used\\n      val = parse(val);\\n      maskedVal = format(val);\\n    } // Call formatter and parser if passed\\n\\n\\n    if (formatter) {\\n      var _res = informedFormat(val, formatter);\\n\\n      setCursorOffset(_res.offset);\\n      maskedVal = _res.value;\\n      val = maskedVal;\\n    } // // Only parse if parser was passed\\n\\n\\n    if (parser) {\\n      val = val != null ? parser(val) : val;\\n    } // We only need to call validate if the user gave us one\\n    // and they want us to validate on change && its not the initial validation\\n\\n\\n    if (validate && validateOnChange && !options.initial) {\\n      logger(\"Validating after change \".concat(field, \" \").concat(val));\\n      setError(validate(val, formApi.getValues()));\\n    } // Now we update the value\\n\\n\\n    setVal(val);\\n    setMaskedValue(maskedVal); // If the user passed in onValueChange then call it!\\n\\n    if (onValueChange) {\\n      onValueChange(val);\\n    } // Call the updater\\n\\n\\n    updater.setValue(fieldId, val, !options.preventUpdate);\\n  }; // ---- Define set touched ----\\n\\n\\n  var setTouched = function setTouched(val, reset) {\\n    var _ref6 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\\n        preventUpdate = _ref6.preventUpdate;\\n\\n    logger(\"Field \".concat(field, \" has been touched\")); // We only need to call validate if the user gave us one\\n    // and they want us to validate on blur\\n\\n    if (validate && validateOnBlur && !reset && val) {\\n      logger(\"Validating after blur \".concat(field, \" \").concat(getVal()));\\n      setError(validate(getVal(), formApi.getValues()));\\n    } // Same for async\\n\\n\\n    if (asyncValidate && asyncValidateOnBlur && !reset && val) {\\n      logger(\"Validating async after blur \".concat(field, \" \").concat(getVal()));\\n      asyncValidate(getVal(), formApi.getValues());\\n    } // Call mask if it was passed\\n\\n\\n    if (mask && maskOnBlur) {\\n      // Generate the masked value from the current value\\n      var maskedVal = mask(getVal()); // Now we update the value\\n\\n      setVal(maskedVal);\\n      setMaskedValue(maskedVal); // If the user passed in onValueChange then call it!\\n\\n      if (onValueChange) {\\n        onValueChange(maskedVal);\\n      } // Call the updater\\n\\n\\n      updater.setValue(fieldId, maskedVal, !preventUpdate);\\n    } // Call maskWithCursorOffset if it was passed\\n\\n\\n    if (maskWithCursorOffset && maskOnBlur) {\\n      // Generate the mask and offset\\n      var res = maskWithCursorOffset(getVal()); // Set the offset\\n\\n      setCursorOffset(res.offset); // Now we update the value\\n\\n      setVal(res.value);\\n      setMaskedValue(res.value); // If the user passed in onValueChange then call it!\\n\\n      if (onValueChange) {\\n        onValueChange(res.value);\\n      } // Call the updater\\n\\n\\n      updater.setValue(fieldId, res.value, !preventUpdate);\\n    } // Finally we set touched and call the updater\\n\\n\\n    setTouch(val);\\n    updater.setTouched(fieldId, val, !preventUpdate);\\n  }; // ---- Define reset ----\\n\\n\\n  var reset = function reset() {\\n    var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\\n        preventUpdate = _ref7.preventUpdate;\\n\\n    var initVal = initializeValue(initialValueRef.current || updater.getInitialValue(fieldRef.current), mask, formatter, parser); // TODO support numbers\\n\\n    setValue(initVal, null, {\\n      initial: true,\\n      preventUpdate: preventUpdate\\n    }); // Setting somthing to undefined will remove it\\n\\n    setError(validateOnMount ? validate(initVal) : undefined, {\\n      preventUpdate: preventUpdate\\n    });\\n    setTouched(undefined, true, {\\n      preventUpdate: preventUpdate\\n    });\\n  }; // ---- Define validate ----\\n  // Note: it takes values as an optimization for when\\n  // the form controller calls it ( dont need to generate all values )\\n  // over and over :)\\n\\n\\n  var fieldValidate = function fieldValidate(values) {\\n    if (validate) {\\n      logger(\"Field validating \".concat(field, \" \").concat(getVal()));\\n      setError(validate(getVal(), values || formApi.getValues()));\\n    }\\n  };\\n\\n  var fieldAsyncValidate = function fieldAsyncValidate(values) {\\n    if (asyncValidate) {\\n      logger(\"Field async validating \".concat(field, \" \").concat(getVal()));\\n      asyncValidate(getVal(), values || formApi.getValues());\\n    }\\n  };\\n  /* ----------------- Field Api && State ----------------- */\\n  // Build the field api\\n\\n\\n  var fieldApi = {\\n    setValue: setValue,\\n    setTouched: setTouched,\\n    setError: setError,\\n    reset: reset,\\n    validate: fieldValidate,\\n    asyncValidate: fieldAsyncValidate,\\n    getValue: getVal,\\n    getTouched: getTouch,\\n    getError: getErr,\\n    getIsRelevant: getIsRelevant,\\n    getFieldState: function getFieldState() {\\n      return {\\n        value: getVal(),\\n        touched: getTouch()\\n      };\\n    },\\n    relevant: relevant,\\n    multistepRelevant: multistepRelevant,\\n    checkRelevant: checkRelevant\\n  };\\n  fieldApiRef.current = fieldApi; // Build the field state\\n\\n  var fieldState = {\\n    value: value,\\n    error: error,\\n    touched: touched,\\n    maskedValue: maskedValue,\\n    isRelevant: isRelevant\\n  }; // Create shadow state if this is a shadow field\\n\\n  if (shadow) {\\n    fieldState = {\\n      error: error,\\n      touched: touched\\n    };\\n  }\\n\\n  logger(\\'Render\\', formApi.getFullField(field), fieldState);\\n  var internalRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(null);\\n  var ref = react__WEBPACK_IMPORTED_MODULE_0___default.a.useMemo(function () {\\n    return userRef || internalRef;\\n  }, []); // We want to register and deregister this field\\n\\n  useIsomorphicLayoutEffect(function () {\\n    var fullField = formApi.getFullField(fieldRef.current);\\n    logger(\\'Register\\', fieldId, fieldRef.current);\\n    fieldObjectRef.current = {\\n      field: fullField,\\n      fieldId: fieldId,\\n      fieldApi: fieldApi,\\n      fieldState: fieldState,\\n      notify: notify,\\n      keepState: keepState,\\n      inMultistep: inMultistep,\\n      shadow: shadow\\n    };\\n    updater.register(fieldId, fieldObjectRef.current);\\n    return function () {\\n      var fullField = formApi.getFullField(fieldRef.current);\\n      logger(\\'Deregister\\', fieldId, fullField);\\n      updater.deregister(fieldId);\\n    };\\n  }, []); // We want to let the controller know of changes on this field when specific props change\\n\\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\\n    var fullField = formApi.getFullField(field);\\n\\n    if (initialRenerRef.current) {\\n      initialRenerRef.current = false;\\n    } else {\\n      logger(\\'Update\\', field, inMultistep);\\n      fieldObjectRef.current.field = fullField;\\n      updater.update(fieldId, fieldObjectRef.current, prevFieldRef.current);\\n    }\\n\\n    return function () {\\n      prevFieldRef.current = fullField;\\n    };\\n  }, [field]); // Maintain cursor position\\n\\n  useIsomorphicLayoutEffect(function () {\\n    if (maintainCursor && ref.current != null && getCursor()) ref.current.selectionEnd = getCursor() + getCursorOffset();\\n  }, [value]); // for debugging\\n\\n  useIsomorphicLayoutEffect(function () {\\n    if (debug && ref) {\\n      ref.current.style.border = \\'5px solid orange\\';\\n      setTimeout(function () {\\n        ref.current.style.borderWidth = \\'2px\\';\\n        ref.current.style.borderStyle = \\'inset\\';\\n        ref.current.style.borderColor = \\'initial\\';\\n        ref.current.style.borderImage = \\'initial\\';\\n      }, 500);\\n    }\\n  }); // This is an awesome optimization!!\\n\\n  var shouldUpdate = [].concat(_toConsumableArray(Object.values(fieldState)), _toConsumableArray(Object.values(fieldProps)), _toConsumableArray(Object.values(userProps)));\\n\\n  var render = function render(children) {\\n    return Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useMemo\"])(function () {\\n      return isRelevant ? children : null;\\n    }, _toConsumableArray(shouldUpdate));\\n  }; // Build some setub fields so users can easily intagrate without any hookup code\\n\\n\\n  var name = field;\\n  var changeHandler = generateOnChange({\\n    fieldType: fieldType,\\n    setValue: setValue,\\n    onChange: onChange,\\n    multiple: multiple,\\n    ref: ref\\n  });\\n  var blurHandler = generateOnBlur({\\n    setTouched: setTouched,\\n    onBlur: onBlur\\n  });\\n  var hookedValue = generateValue({\\n    fieldType: fieldType,\\n    maskedValue: maskedValue,\\n    multiple: multiple,\\n    value: value\\n  });\\n  var type = generateFieldType(fieldType);\\n  return {\\n    fieldState: fieldState,\\n    fieldApi: fieldApi,\\n    render: render,\\n    ref: ref,\\n    userProps: _objectSpread2(_objectSpread2({}, userProps), {}, {\\n      multiple: multiple,\\n      // WE NEED TO PUT THESE BACK!!\\n      onChange: onChange,\\n      // WE NEED TO PUT THESE BACK!!\\n      onBlur: onBlur,\\n      // WE NEED TO PUT THESE BACK!!\\n      // required // WE NEED TO PUT THESE BACK!!\\n      id: userProps.id || fieldId // If user did not pass id we pass fields id\\n\\n    }),\\n    informed: _objectSpread2({\\n      name: name,\\n      multiple: multiple,\\n      onChange: changeHandler,\\n      onBlur: blurHandler,\\n      value: hookedValue,\\n      ref: ref,\\n      type: type,\\n      id: userProps.id || fieldId\\n    }, userProps)\\n  };\\n}\\n\\nvar asField = function asField(Component) {\\n  var forwardRef = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.forwardRef(function (props, userRef) {\\n    var _useField = useField(props, userRef),\\n        fieldState = _useField.fieldState,\\n        fieldApi = _useField.fieldApi,\\n        render = _useField.render,\\n        ref = _useField.ref,\\n        userProps = _useField.userProps;\\n\\n    return render( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _extends({\\n      fieldApi: fieldApi,\\n      fieldState: fieldState,\\n      field: props.field,\\n      forwardedRef: ref,\\n      debug: props.debug,\\n      type: props.type\\n    }, userProps)));\\n  });\\n  forwardRef.displayName = \"asField(\".concat(getChildDisplayName(Component), \")\");\\n  return forwardRef;\\n};\\n\\nvar logger$1 = debug(\\'informed:Text\\' + \\'\\\\t\\');\\n\\nvar Text = function Text(_ref) {\\n  var fieldApi = _ref.fieldApi,\\n      fieldState = _ref.fieldState,\\n      props = _objectWithoutProperties(_ref, [\"fieldApi\", \"fieldState\"]);\\n\\n  var maskedValue = fieldState.maskedValue;\\n  var setValue = fieldApi.setValue,\\n      setTouched = fieldApi.setTouched;\\n\\n  var _onChange = props.onChange,\\n      _onBlur = props.onBlur,\\n      field = props.field,\\n      initialValue = props.initialValue,\\n      forwardedRef = props.forwardedRef,\\n      debug = props.debug,\\n      label = props.label,\\n      title = props.title,\\n      id = props.id,\\n      rest = _objectWithoutProperties(props, [\"onChange\", \"onBlur\", \"field\", \"initialValue\", \"forwardedRef\", \"debug\", \"label\", \"title\", \"id\"]);\\n\\n  logger$1(\\'Render\\', field); // for debugging\\n\\n  useIsomorphicLayoutEffect(function () {\\n    if (debug && forwardedRef) {\\n      forwardedRef.current.style.background = \\'red\\';\\n      setTimeout(function () {\\n        forwardedRef.current.style.background = \\'white\\';\\n      }, 500);\\n    }\\n  });\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, label ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"label\", {\\n    htmlFor: id\\n  }, \" \", label, \" \") : null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"input\", _extends({}, rest, {\\n    id: id,\\n    name: field,\\n    ref: forwardedRef,\\n    value: !maskedValue && maskedValue !== 0 ? \\'\\' : maskedValue,\\n    onChange: function onChange(e) {\\n      setValue(e.target.value, e);\\n\\n      if (_onChange) {\\n        _onChange(e);\\n      }\\n    },\\n    onBlur: function onBlur(e) {\\n      setTouched(true);\\n\\n      if (_onBlur) {\\n        _onBlur(e);\\n      }\\n    }\\n  })));\\n};\\nvar Text$1 = asField(Text);\\n\\nvar TextArea = function TextArea(_ref) {\\n  var fieldApi = _ref.fieldApi,\\n      fieldState = _ref.fieldState,\\n      props = _objectWithoutProperties(_ref, [\"fieldApi\", \"fieldState\"]);\\n\\n  var maskedValue = fieldState.maskedValue;\\n  var setValue = fieldApi.setValue,\\n      setTouched = fieldApi.setTouched;\\n\\n  var _onChange = props.onChange,\\n      _onBlur = props.onBlur,\\n      field = props.field,\\n      initialValue = props.initialValue,\\n      forwardedRef = props.forwardedRef,\\n      debug = props.debug,\\n      label = props.label,\\n      id = props.id,\\n      rest = _objectWithoutProperties(props, [\"onChange\", \"onBlur\", \"field\", \"initialValue\", \"forwardedRef\", \"debug\", \"label\", \"id\"]); // for debugging\\n\\n\\n  useIsomorphicLayoutEffect(function () {\\n    if (debug && forwardedRef) {\\n      forwardedRef.current.style.background = \\'red\\';\\n      setTimeout(function () {\\n        forwardedRef.current.style.background = \\'white\\';\\n      }, 500);\\n    }\\n  });\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, label ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"label\", {\\n    htmlFor: id\\n  }, \" \", label, \" \") : null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"textarea\", _extends({}, rest, {\\n    id: id,\\n    name: field,\\n    ref: forwardedRef,\\n    value: !maskedValue ? \\'\\' : maskedValue,\\n    onChange: function onChange(e) {\\n      setValue(e.target.value, e);\\n\\n      if (_onChange) {\\n        _onChange(e);\\n      }\\n    },\\n    onBlur: function onBlur(e) {\\n      setTouched(true);\\n\\n      if (_onBlur) {\\n        _onBlur(e);\\n      }\\n    }\\n  })));\\n};\\nvar TextArea$1 = asField(TextArea);\\n\\nvar logger$2 = debug(\\'informed:Select\\' + \\'\\\\t\\');\\n\\nvar Select = function Select(_ref) {\\n  var fieldApi = _ref.fieldApi,\\n      fieldState = _ref.fieldState,\\n      props = _objectWithoutProperties(_ref, [\"fieldApi\", \"fieldState\"]);\\n\\n  var value = fieldState.value;\\n  var setTouched = fieldApi.setTouched;\\n\\n  var onChange = props.onChange,\\n      _onBlur = props.onBlur,\\n      field = props.field,\\n      initialValue = props.initialValue,\\n      options = props.options,\\n      children = props.children,\\n      forwardedRef = props.forwardedRef,\\n      debug = props.debug,\\n      multiple = props.multiple,\\n      label = props.label,\\n      id = props.id,\\n      rest = _objectWithoutProperties(props, [\"onChange\", \"onBlur\", \"field\", \"initialValue\", \"options\", \"children\", \"forwardedRef\", \"debug\", \"multiple\", \"label\", \"id\"]);\\n\\n  var selectRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\\n\\n  var handleChange = function handleChange(e) {\\n    var selected = Array.from((forwardedRef || selectRef).current).filter(function (option) {\\n      return option.selected;\\n    }).map(function (option) {\\n      return option.value;\\n    });\\n    fieldApi.setValue(multiple ? selected : selected[0] || \\'\\');\\n\\n    if (onChange && e) {\\n      onChange(e);\\n    }\\n  }; // for debugging\\n\\n\\n  useIsomorphicLayoutEffect(function () {\\n    if (debug && forwardedRef) {\\n      forwardedRef.current.style.background = \\'red\\';\\n      setTimeout(function () {\\n        forwardedRef.current.style.background = \\'white\\';\\n      }, 500);\\n    }\\n  });\\n  logger$2(\\'Render\\', field, value);\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, label ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"label\", {\\n    htmlFor: id\\n  }, \" \", label, \" \") : null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"select\", _extends({}, rest, {\\n    id: id,\\n    multiple: multiple,\\n    name: field,\\n    ref: forwardedRef || selectRef,\\n    value: value || (multiple ? [] : \\'\\'),\\n    onChange: handleChange,\\n    onBlur: function onBlur(e) {\\n      setTouched(true);\\n\\n      if (_onBlur) {\\n        _onBlur(e);\\n      }\\n    }\\n  }), options ? options.map(function (option) {\\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"option\", {\\n      key: option.value,\\n      value: option.value,\\n      disabled: option.disabled\\n    }, option.label);\\n  }) : children));\\n};\\nvar Select$1 = asField(Select);\\n\\nvar Checkbox = function Checkbox(_ref) {\\n  var fieldApi = _ref.fieldApi,\\n      fieldState = _ref.fieldState,\\n      props = _objectWithoutProperties(_ref, [\"fieldApi\", \"fieldState\"]);\\n\\n  var value = fieldState.value;\\n  var setValue = fieldApi.setValue,\\n      setTouched = fieldApi.setTouched;\\n\\n  var _onChange = props.onChange,\\n      _onBlur = props.onBlur,\\n      field = props.field,\\n      initialValue = props.initialValue,\\n      debug = props.debug,\\n      forwardedRef = props.forwardedRef,\\n      id = props.id,\\n      label = props.label,\\n      rest = _objectWithoutProperties(props, [\"onChange\", \"onBlur\", \"field\", \"initialValue\", \"debug\", \"forwardedRef\", \"id\", \"label\"]);\\n\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, label ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"label\", {\\n    htmlFor: id\\n  }, \" \", label, \" \") : null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"input\", _extends({}, rest, {\\n    id: id,\\n    name: field,\\n    ref: forwardedRef,\\n    checked: !!value,\\n    onChange: function onChange(e) {\\n      setValue(e.target.checked);\\n\\n      if (_onChange) {\\n        _onChange(e);\\n      }\\n    },\\n    onBlur: function onBlur(e) {\\n      setTouched(true);\\n\\n      if (_onBlur) {\\n        _onBlur(e);\\n      }\\n    },\\n    type: \"checkbox\"\\n  })));\\n};\\nvar Checkbox$1 = asField(Checkbox);\\n\\nvar withRadioGroup = function withRadioGroup(Component) {\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.forwardRef(function (props, ref) {\\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(GroupContext.Consumer, null, function (_ref) {\\n      var radioGroupApi = _ref.radioGroupApi,\\n          radioGroupState = _ref.radioGroupState;\\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _extends({\\n        radioGroupApi: radioGroupApi,\\n        radioGroupState: radioGroupState,\\n        ref: ref\\n      }, props));\\n    });\\n  });\\n};\\n\\nvar Radio = function Radio(_ref) {\\n  var radioGroupApi = _ref.radioGroupApi,\\n      radioGroupState = _ref.radioGroupState,\\n      props = _objectWithoutProperties(_ref, [\"radioGroupApi\", \"radioGroupState\"]);\\n\\n  var groupValue = radioGroupState.value;\\n  var setValue = radioGroupApi.setValue,\\n      setTouched = radioGroupApi.setTouched,\\n      groupOnChange = radioGroupApi.onChange,\\n      groupOnBlur = radioGroupApi.onBlur;\\n\\n  var value = props.value,\\n      _onChange = props.onChange,\\n      _onBlur = props.onBlur,\\n      field = props.field,\\n      initialValue = props.initialValue,\\n      forwardedRef = props.forwardedRef,\\n      rest = _objectWithoutProperties(props, [\"value\", \"onChange\", \"onBlur\", \"field\", \"initialValue\", \"forwardedRef\"]);\\n\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"input\", _extends({}, rest, {\\n    name: field,\\n    ref: forwardedRef,\\n    value: value,\\n    checked: groupValue === value,\\n    onChange: function onChange(e) {\\n      if (!e.target.checked) {\\n        return;\\n      }\\n\\n      setValue(value);\\n\\n      if (_onChange) {\\n        _onChange(e);\\n      }\\n\\n      if (groupOnChange) {\\n        groupOnChange(e);\\n      }\\n    },\\n    onBlur: function onBlur(e) {\\n      setTouched(true);\\n\\n      if (_onBlur) {\\n        _onBlur(e);\\n      }\\n\\n      if (groupOnBlur) {\\n        groupOnBlur(e);\\n      }\\n    },\\n    type: \"radio\"\\n  }));\\n};\\nvar Radio$1 = withRadioGroup(Radio);\\n\\nvar RadioGroup = /*#__PURE__*/function (_Component) {\\n  _inherits(RadioGroup, _Component);\\n\\n  var _super = _createSuper(RadioGroup);\\n\\n  function RadioGroup() {\\n    _classCallCheck(this, RadioGroup);\\n\\n    return _super.apply(this, arguments);\\n  }\\n\\n  _createClass(RadioGroup, [{\\n    key: \"render\",\\n    value: function render() {\\n      var _this$props = this.props,\\n          options = _this$props.options,\\n          children = _this$props.children;\\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(GroupContext.Provider, {\\n        value: this.groupContext\\n      }, options ? options.map(function (option) {\\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"label\", {\\n          key: option.value\\n        }, option.label, \" \", /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Radio$1, {\\n          value: option.value\\n        }));\\n      }) : children);\\n    }\\n  }, {\\n    key: \"groupContext\",\\n    get: function get() {\\n      return {\\n        radioGroupApi: _objectSpread2(_objectSpread2({}, this.props.fieldApi), {}, {\\n          onChange: this.props.onChange,\\n          onBlur: this.props.onBlur\\n        }),\\n        radioGroupState: this.props.fieldState\\n      };\\n    }\\n  }]);\\n\\n  return RadioGroup;\\n}(react__WEBPACK_IMPORTED_MODULE_0__[\"Component\"]);\\nvar RadioGroup$1 = asField(RadioGroup);\\n\\nfunction useArrayFieldApi() {\\n  return Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useContext\"])(ArrayFieldApiContext);\\n}\\n\\nvar AddButton = function AddButton() {\\n  var _useArrayFieldApi = useArrayFieldApi(),\\n      add = _useArrayFieldApi.add;\\n\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"button\", {\\n    onClick: function onClick() {\\n      add();\\n    },\\n    type: \"button\"\\n  }, \"Add\");\\n};\\n\\nfunction useArrayFieldItemApi() {\\n  return Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useContext\"])(ArrayFieldItemApiContext);\\n}\\n\\nvar AddButton$1 = function AddButton() {\\n  var _useArrayFieldItemApi = useArrayFieldItemApi(),\\n      remove = _useArrayFieldItemApi.remove;\\n\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"button\", {\\n    onClick: function onClick() {\\n      remove();\\n    },\\n    type: \"button\"\\n  }, \"Remove\");\\n};\\n\\nvar logger$3 = debug(\\'informed:useArrayField\\' + \\'\\\\t\\');\\n\\nvar useArrayField = function useArrayField(_ref) {\\n  var field = _ref.field,\\n      initialValue = _ref.initialValue,\\n      validate = _ref.validate,\\n      arrayFieldApiRef = _ref.arrayFieldApiRef,\\n      props = _objectWithoutProperties(_ref, [\"field\", \"initialValue\", \"validate\", \"arrayFieldApiRef\"]);\\n\\n  // Reference to the form Api\\n  var formApi = useFormApi(); // Keep track of fields that belong to this array field\\n\\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(new Map()),\\n      _useState2 = _slicedToArray(_useState, 1),\\n      fieldsById = _useState2[0]; // Grab the form register context\\n\\n\\n  var updater = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useContext\"])(FormRegisterContext); // May be scoped so get full field name!!\\n\\n  var fullField = formApi.getFullField(field);\\n  var initialVals = updater.getInitialValue(field) || initialValue || []; // TODO throw error if initial value and its not array\\n  // If keep state was passed into the child inputs we need to maintain the length of\\n  // keys, in order to do so we grab the value from informeds api\\n\\n  var keptValues = formApi.getSavedValue(fullField) && formApi.getSavedValue(fullField).value;\\n\\n  var _useStateWithGetter = useStateWithGetter(keptValues || initialVals),\\n      _useStateWithGetter2 = _slicedToArray(_useStateWithGetter, 3),\\n      initialValues = _useStateWithGetter2[0],\\n      setInitialValues = _useStateWithGetter2[1],\\n      getInitialValues = _useStateWithGetter2[2];\\n\\n  var initialKeys = initialValues ? initialValues.map(function () {\\n    return uuidv4();\\n  }) : [];\\n\\n  var _useStateWithGetter3 = useStateWithGetter(initialKeys),\\n      _useStateWithGetter4 = _slicedToArray(_useStateWithGetter3, 3),\\n      keys = _useStateWithGetter4[0],\\n      setKeys = _useStateWithGetter4[1],\\n      getKeys = _useStateWithGetter4[2];\\n\\n  var validateWithLength = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useMemo\"])(function () {\\n    return function (value, values) {\\n      var length = getKeys() == null ? 0 : getKeys().length;\\n      return validate ? validate(value, length, values) : undefined;\\n    };\\n  }); // Register shadow field\\n\\n  var _useField = useField(_objectSpread2({\\n    field: field,\\n    validate: validate ? validateWithLength : undefined,\\n    shadow: true\\n  }, props)),\\n      fieldApi = _useField.fieldApi; // Register for events\\n\\n\\n  useIsomorphicLayoutEffect(function () {\\n    // Define event handler\\n    var onChangeHandler = function onChangeHandler(fieldName) {\\n      // Dont do anythign if we updated\\n      if (fieldName === fullField) {\\n        return;\\n      }\\n\\n      logger$3(\"\".concat(fullField, \" changed\")); // determine if one of our array children triggered this change\\n\\n      if (RegExp(\"\".concat(fullField, \"\\\\\\\\[[0-9]+\\\\\\\\]\")).test(fieldName)) {\\n        // If it was we need to call validate\\n        fieldApi.validate();\\n      }\\n    }; // Register for events\\n\\n\\n    formApi.emitter.on(\\'value\\', onChangeHandler); // Unregister events\\n\\n    return function () {\\n      formApi.emitter.removeListener(\\'value\\', onChangeHandler);\\n    };\\n  }, [field]);\\n\\n  var _remove = function remove(i) {\\n    // Notify form to expect removal on this field\\n    logger$3(\\'EXPECTING REMOVAL OF\\', \"\".concat(field, \"[\").concat(i, \"] and \").concat(field, \"[\").concat(keys.length - 1, \"]\"));\\n    updater.expectRemoval(\"\".concat(field, \"[\").concat(i, \"]\"));\\n    updater.expectRemoval(\"\".concat(field, \"[\").concat(keys.length - 1, \"]\")); // Remove the key\\n\\n    var newKeys = keys.slice(0, i).concat(keys.slice(i + 1, keys.length));\\n    setKeys(newKeys); // Remove the initial value ( user wanted to get rid of that input )\\n\\n    var initVals = getInitialValues();\\n    var newInitialValues = initVals.slice(0, i).concat(initVals.slice(i + 1, initVals.length));\\n    setInitialValues(newInitialValues); //formApi.setInitialValue(field, newInitialValues);\\n  };\\n\\n  var swap = function swap(a, b) {\\n    logger$3(\\'Swapping\\', \"\".concat(field, \"[\").concat(a, \"] and \").concat(field, \"[\").concat(b, \"]\")); // Swap the keys\\n\\n    var newKeys = _toConsumableArray(keys);\\n\\n    if (keys[a] && keys[b]) {\\n      newKeys[a] = keys[b];\\n      newKeys[b] = keys[a];\\n    } else {\\n      // eslint-disable-next-line no-console\\n      console.warn(\"Attempted to swap \".concat(a, \" with \").concat(b, \" but one of them does not exist :(\"));\\n    }\\n\\n    setKeys(newKeys);\\n  };\\n\\n  var add = function add() {\\n    keys.push(uuidv4());\\n    setKeys(_toConsumableArray(keys));\\n  };\\n\\n  var addWithInitialValue = function addWithInitialValue(initialValue) {\\n    keys.push(uuidv4());\\n    setKeys(_toConsumableArray(keys));\\n\\n    var newInitialValues = _toConsumableArray(getInitialValues());\\n\\n    newInitialValues[keys.length - 1] = initialValue;\\n    setInitialValues(newInitialValues);\\n  };\\n\\n  var reset = function reset() {\\n    // When resetting we reset to the users initial value not the one tracked by this hook\\n    var initVals = updater.getInitialValue(field) || initialValue || []; // Set our initial values back to what the user set at beginning\\n\\n    setInitialValues(initVals); // Build a new set of keys because everything is new !!!\\n\\n    var resetKeys = initVals ? initVals.map(function () {\\n      return uuidv4();\\n    }) : []; // Finally set that shit !\\n\\n    setKeys(resetKeys);\\n  };\\n\\n  var fields = keys.map(function (key, i) {\\n    var arrayFieldItemApi = {\\n      remove: function remove() {\\n        return _remove(i);\\n      }\\n    };\\n    var arrayFieldItemState = {\\n      initialValue: initialValues && initialValues[i],\\n      key: key,\\n      field: \"\".concat(field, \"[\").concat(i, \"]\"),\\n      index: i\\n    };\\n    return _objectSpread2(_objectSpread2({\\n      arrayFieldItemApi: arrayFieldItemApi,\\n      arrayFieldItemState: arrayFieldItemState\\n    }, arrayFieldItemApi), arrayFieldItemState);\\n  });\\n  var arrayFieldApi = {\\n    add: add,\\n    swap: swap,\\n    addWithInitialValue: addWithInitialValue,\\n    reset: reset\\n  };\\n\\n  if (arrayFieldApiRef) {\\n    arrayFieldApiRef.current = arrayFieldApi;\\n  }\\n\\n  var arrayFieldState = {\\n    fields: fields,\\n    field: field\\n  }; // Wrap the updater to update array fields references\\n\\n  var wrappedUpdator = _objectSpread2(_objectSpread2({}, updater), {}, {\\n    register: function register(id, fld) {\\n      fieldsById.set(id, fld);\\n\\n      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\\n        args[_key - 2] = arguments[_key];\\n      }\\n\\n      updater.register.apply(updater, [id, fld].concat(args));\\n    },\\n    deregister: function deregister(id) {\\n      fieldsById[\"delete\"](id);\\n\\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\\n        args[_key2 - 1] = arguments[_key2];\\n      }\\n\\n      updater.deregister.apply(updater, [id].concat(args));\\n    },\\n    getInitialValue: function getInitialValue(fieldName) {\\n      // If we are getting initial value and its for this field return that\\n      if (RegExp(\"\".concat(fullField, \"\\\\\\\\[[0-9]+\\\\\\\\]\")).test(fieldName)) {\\n        var path = fieldName.replace(field, \\'\\');\\n        var v = ObjectMap.get(getInitialValues(), path);\\n        logger$3(\"Resetting \".concat(path, \" to \").concat(v));\\n        return v;\\n      }\\n\\n      return updater.getInitialValue(fieldName);\\n    }\\n  });\\n\\n  var render = function render(children) {\\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormRegisterContext.Provider, {\\n      value: wrappedUpdator\\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ArrayFieldApiContext.Provider, {\\n      value: arrayFieldApi\\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ArrayFieldStateContext.Provider, {\\n      value: arrayFieldState\\n    }, children)));\\n  };\\n\\n  return {\\n    render: render,\\n    add: add,\\n    swap: swap,\\n    addWithInitialValue: addWithInitialValue,\\n    fields: fields,\\n    arrayFieldState: arrayFieldState,\\n    arrayFieldApi: arrayFieldApi,\\n    field: field\\n  };\\n};\\n\\nvar buildScopedFormApi = function buildScopedFormApi(scope, formApi) {\\n  return _objectSpread2(_objectSpread2({}, formApi), {}, {\\n    getValue: function getValue(field) {\\n      return formApi.getValue(\"\".concat(scope, \".\").concat(field));\\n    },\\n    getTouched: function getTouched(field) {\\n      return formApi.getTouched(\"\".concat(scope, \".\").concat(field));\\n    },\\n    getError: function getError(field) {\\n      return formApi.getError(\"\".concat(scope, \".\").concat(field));\\n    },\\n    setValue: function setValue(field, value) {\\n      return formApi.setValue(\"\".concat(scope, \".\").concat(field), value);\\n    },\\n    setTouched: function setTouched(field, value) {\\n      return formApi.setTouched(\"\".concat(scope, \".\").concat(field), value);\\n    },\\n    setError: function setError(field, value) {\\n      return formApi.setError(\"\".concat(scope, \".\").concat(field), value);\\n    },\\n    getInitialValue: function getInitialValue(field) {\\n      return formApi.getInitialValue(\"\".concat(scope, \".\").concat(field));\\n    },\\n    getFullField: function getFullField(field) {\\n      return \"\".concat(formApi.getFullField(scope), \".\").concat(field);\\n    }\\n  });\\n};\\n\\nfunction useScopedApi(scope) {\\n  var formApi = useFormApi(); // VERY important to memoize the builder!\\n\\n  var scopedFormApi = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useMemo\"])(function () {\\n    return buildScopedFormApi(scope, formApi);\\n  }, [scope]);\\n  return scopedFormApi;\\n}\\n\\nfunction useFormState() {\\n  var formState = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useContext\"])(FormStateContext);\\n  return formState;\\n}\\n\\nvar Relevant = function Relevant(_ref) {\\n  var when = _ref.when,\\n      children = _ref.children;\\n  var formState = useFormState();\\n  var isRelevant = when(formState);\\n\\n  if (isRelevant) {\\n    return children;\\n  }\\n\\n  return null;\\n};\\n\\nvar ArrayField = function ArrayField(_ref) {\\n  var relevant = _ref.relevant,\\n      field = _ref.field,\\n      props = _objectWithoutProperties(_ref, [\"relevant\", \"field\"]);\\n\\n  // Need to get formApi to have consistant interface for relevant function\\n  var formApi = useFormApi();\\n\\n  if (relevant) {\\n    var ff = formApi.getFullField(field);\\n    var args = {\\n      path: ff,\\n      parentPath: ff.replace(/(.*)[.[].*/, \\'$1\\'),\\n      get: function get(values, path) {\\n        return ObjectMap.get(values, path);\\n      }\\n    };\\n\\n    var when = function when(_ref2) {\\n      var values = _ref2.values;\\n      return relevant(values, args);\\n    };\\n\\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Relevant, {\\n      when: when\\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ArrayFieldWrapper, _extends({\\n      field: field\\n    }, props)));\\n  } else {\\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ArrayFieldWrapper, _extends({\\n      field: field\\n    }, props));\\n  }\\n};\\n\\nvar ArrayFieldWrapper = function ArrayFieldWrapper(_ref3) {\\n  var children = _ref3.children,\\n      props = _objectWithoutProperties(_ref3, [\"children\"]);\\n\\n  var _useArrayField = useArrayField(props),\\n      render = _useArrayField.render,\\n      arrayFieldState = _useArrayField.arrayFieldState,\\n      arrayFieldApi = _useArrayField.arrayFieldApi,\\n      field = _useArrayField.field;\\n\\n  if (typeof children === \\'function\\') {\\n    return render(children(_objectSpread2(_objectSpread2({\\n      field: field,\\n      arrayFieldApi: arrayFieldApi,\\n      arrayFieldState: arrayFieldState\\n    }, arrayFieldApi), arrayFieldState)));\\n  }\\n\\n  return render(children);\\n};\\n\\nvar ArrayFieldItem = function ArrayFieldItem(_ref4) {\\n  var arrayFieldItemState = _ref4.arrayFieldItemState,\\n      arrayFieldItemApi = _ref4.arrayFieldItemApi,\\n      children = _ref4.children;\\n  // Grab the form register context\\n  var updater = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useContext\"])(FormRegisterContext); // Grab the form state\\n\\n  var formApi = useFormApi(); // A little trick I learned in nam to trigger rerender\\n\\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(0),\\n      _useState2 = _slicedToArray(_useState, 2),\\n      state = _useState2[0],\\n      setState = _useState2[1]; // Keep track of fields that belong to this array field\\n\\n\\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(new Map()),\\n      _useState4 = _slicedToArray(_useState3, 1),\\n      fieldsById = _useState4[0]; // Get this items field\\n\\n\\n  var field = arrayFieldItemState.field; // Create scoped api\\n\\n  var scopedApi = useScopedApi(field); // State generation function\\n\\n  var getState = function getState() {\\n    var _formApi$getState = formApi.getState(),\\n        values = _formApi$getState.values,\\n        errors = _formApi$getState.errors,\\n        touched = _formApi$getState.touched; // Get this fields state\\n\\n\\n    var itemState = {\\n      values: ObjectMap.get(values, field),\\n      errors: ObjectMap.get(errors, field),\\n      touched: ObjectMap.get(touched, field)\\n    };\\n    return itemState;\\n  }; // Register for events for rerenders!\\n\\n\\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\\n    // Define event handler\\n    var onChangeHandler = function onChangeHandler(fieldName) {\\n      // Example foo.bar.baz[3].baz >>>> foo.bar.baz[3]\\n      var magicValue = fieldName.slice(0, fieldName.lastIndexOf(\\'[\\') != -1 ? fieldName.lastIndexOf(\\']\\') + 1 : fieldName.length); // This field updated so trigger rerender\\n\\n      if (magicValue === field) {\\n        setState(Math.random());\\n      }\\n    }; // Register for events\\n\\n\\n    formApi.emitter.on(\\'value\\', onChangeHandler); // Unregister events\\n\\n    return function () {\\n      formApi.emitter.removeListener(\\'value\\', onChangeHandler);\\n    };\\n  }, [field]); // Resets all fields in this item\\n\\n  var reset = function reset() {\\n    fieldsById.forEach(function (fld) {\\n      fld.fieldApi.reset();\\n    });\\n  }; // Generate the item state\\n\\n\\n  var itemState = getState(); // Wrap the updater to update array fields references\\n\\n  var wrappedUpdator = _objectSpread2(_objectSpread2({}, updater), {}, {\\n    register: function register(id, fld, initialRender) {\\n      fieldsById.set(id, fld);\\n      updater.register(id, fld, initialRender);\\n    },\\n    deregister: function deregister(id) {\\n      fieldsById[\"delete\"](id);\\n\\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\\n        args[_key - 1] = arguments[_key];\\n      }\\n\\n      updater.deregister.apply(updater, [id].concat(args));\\n    }\\n  });\\n\\n  var arrayFieldItemApiValue = _objectSpread2(_objectSpread2(_objectSpread2({}, arrayFieldItemApi), scopedApi), {}, {\\n    reset: reset\\n  });\\n\\n  var arrayFieldItemStateValue = _objectSpread2(_objectSpread2({}, arrayFieldItemState), itemState);\\n\\n  if (typeof children === \\'function\\') {\\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormRegisterContext.Provider, {\\n      value: wrappedUpdator\\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ArrayFieldItemApiContext.Provider, {\\n      value: arrayFieldItemApiValue\\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ArrayFieldItemStateContext.Provider, {\\n      value: arrayFieldItemStateValue\\n    }, children(_objectSpread2(_objectSpread2({\\n      arrayFieldItemApi: arrayFieldItemApiValue,\\n      arrayFieldItemState: arrayFieldItemStateValue\\n    }, arrayFieldItemApiValue), arrayFieldItemStateValue)))));\\n  }\\n\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormRegisterContext.Provider, {\\n    value: wrappedUpdator\\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ArrayFieldItemApiContext.Provider, {\\n    value: arrayFieldItemApiValue\\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ArrayFieldItemStateContext.Provider, {\\n    value: arrayFieldItemStateValue\\n  }, children)));\\n};\\n\\nArrayField.Items = function (_ref5) {\\n  var children = _ref5.children;\\n\\n  var _useContext = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useContext\"])(ArrayFieldStateContext),\\n      fields = _useContext.fields;\\n\\n  return fields.map(function (_ref6) {\\n    var arrayFieldItemState = _ref6.arrayFieldItemState,\\n        arrayFieldItemApi = _ref6.arrayFieldItemApi;\\n    var key = arrayFieldItemState.key;\\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ArrayFieldItem, {\\n      key: key,\\n      arrayFieldItemApi: arrayFieldItemApi,\\n      arrayFieldItemState: arrayFieldItemState\\n    }, children);\\n  });\\n};\\n\\nvar FormComponents = function FormComponents(_ref) {\\n  var components = _ref.components;\\n\\n  // Get the field map off the forms context\\n  var _useContext = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useContext\"])(FormRegisterContext),\\n      fieldMap = _useContext.fieldMap;\\n\\n  if (!components) return null;\\n  return components.map(function (comp, i) {\\n    var componentType = comp[\\'ui:control\\'];\\n    var Component = fieldMap[componentType];\\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, {\\n      key: \"ui-comp-\".concat(i)\\n    });\\n  });\\n};\\n\\nvar logger$4 = debug(\\'informed:FormFields\\' + \\'\\\\t\\');\\n\\nvar FormFields = function FormFields(_ref) {\\n  var schema = _ref.schema,\\n      prefix = _ref.prefix,\\n      onlyValidateSchema = _ref.onlyValidateSchema;\\n\\n  // Get the field map off the forms context\\n  var _useContext = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useContext\"])(FormRegisterContext),\\n      fieldMap = _useContext.fieldMap; // Get fields from scheama\\n\\n\\n  var fields = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useMemo\"])(function () {\\n    var schemaFields = computeFieldsFromSchema(schema, onlyValidateSchema, prefix);\\n    var mapedFields = schemaFields.map(function (schemaField, i) {\\n      var field = schemaField.field,\\n          props = schemaField.props,\\n          type = schemaField.type,\\n          properties = schemaField.properties,\\n          items = schemaField.items,\\n          componentType = schemaField.componentType,\\n          uiBefore = schemaField.uiBefore,\\n          uiAfter = schemaField.uiAfter,\\n          allOf = schemaField.allOf;\\n      var Component = fieldMap[componentType]; // console.log(\\'WTF\\', schemaField);\\n\\n      logger$4(\\'Rendering Field\\', field, schemaField); // Scope for nested\\n\\n      if (!Component && type === \\'object\\' && properties) {\\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormFields, {\\n          schema: schemaField,\\n          prefix: field,\\n          key: \"ScheamField-\".concat(i)\\n        });\\n      } // Array field for array ( if none was provided use our default )\\n\\n\\n      if (!Component && type === \\'array\\' && items) {\\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ArrayField$1, _extends({\\n          key: \"ScheamField-\".concat(i),\\n          field: field,\\n          items: items,\\n          uiBefore: uiBefore,\\n          uiAfter: uiAfter\\n        }, props));\\n      } // User created custom array field\\n\\n\\n      if (Component && componentType === \\'array\\' && items && type === \\'array\\') {\\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _extends({\\n          key: \"ScheamField-\".concat(i),\\n          field: field,\\n          items: items,\\n          uiBefore: uiBefore,\\n          uiAfter: uiAfter\\n        }, props));\\n      } // For conditionals\\n\\n\\n      if (componentType === \\'conditionals\\') {\\n        return allOf.map(function (conditional) {\\n          // Example then ( its a subschema )\\n          // then: {\\n          //   properties: {\\n          //     spouse: {\\n          //       type: \\'string\\',\\n          //       title: \\'Spouse name\\',\\n          //       \\'ui:control\\': \\'input\\'\\n          //     }\\n          //   }\\n          // }\\n          var subSchema = conditional.then; // Turn the if into a when function for informed\\n          // Example if condition\\n          // if: {\\n          //   properties: {\\n          //     married: { const: \\'yes\\' }\\n          //   },\\n          //   required: [\\'married\\']\\n          // },\\n\\n          var conditions = conditional[\"if\"].properties;\\n\\n          var when = function when(_ref2) {\\n            var values = _ref2.values;\\n            // Example key \"married, Example condition: \"{ const: \\'yes\\' }\"\\n            return Object.keys(conditions).every(function (key) {\\n              var condition = conditions[key]; // values.married === \\'yes\\'\\n\\n              return values[key] === condition[\"const\"];\\n            });\\n          };\\n\\n          return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Relevant, {\\n            key: \"ScheamField-\".concat(i),\\n            when: when\\n          }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormFields, {\\n            schema: subSchema\\n          }));\\n        });\\n      } // If no com ret null ( dont render )\\n\\n\\n      if (!Component) {\\n        return null;\\n      }\\n\\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _extends({\\n        key: \"ScheamField-\".concat(i),\\n        field: field\\n      }, props));\\n    });\\n    return mapedFields;\\n  }, [schema, prefix]);\\n  return fields;\\n};\\n\\nvar ArrayField$1 = function ArrayField$1(_ref) {\\n  var field = _ref.field,\\n      items = _ref.items,\\n      uiBefore = _ref.uiBefore,\\n      uiAfter = _ref.uiAfter,\\n      props = _objectWithoutProperties(_ref, [\"field\", \"items\", \"uiBefore\", \"uiAfter\"]);\\n\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ArrayField, _extends({\\n    field: field\\n  }, props), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormComponents, {\\n    components: uiBefore\\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ArrayField.Items, null, function (_ref2) {\\n    var field = _ref2.field;\\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormComponents, {\\n      components: items[\\'ui:before\\']\\n    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormFields, {\\n      schema: items,\\n      prefix: field\\n    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormComponents, {\\n      components: items[\\'ui:after\\']\\n    }));\\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormComponents, {\\n    components: uiAfter\\n  }));\\n};\\n\\nvar defaultFieldMap = {\\n  select: Select$1,\\n  input: Text$1,\\n  textarea: TextArea$1,\\n  checkbox: Checkbox$1,\\n  radio: RadioGroup$1,\\n  add: AddButton,\\n  remove: AddButton$1,\\n  array: ArrayField$1\\n};\\n\\nvar debug$2 = debug(\\'informed:Controller\\' + \\'\\\\t\\');\\n\\nvar isExpected = function isExpected(path, expectedRemovals) {\\n  var includedKey = Object.keys(expectedRemovals).find(function (key) {\\n    return path.includes(key);\\n  });\\n  if (!includedKey) return;\\n  var start = path.slice(0, includedKey.length);\\n  return start === includedKey;\\n};\\n\\nvar noop = function noop() {};\\n\\nvar FormController = /*#__PURE__*/function (_EventEmitter) {\\n  _inherits(FormController, _EventEmitter);\\n\\n  var _super = _createSuper(FormController);\\n\\n  function FormController() {\\n    var _this;\\n\\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n\\n    _classCallCheck(this, FormController);\\n\\n    // Dont forget to call super! :)\\n    _this = _super.call(this);\\n    _this.options = options;\\n    var ajv = options.ajv,\\n        schema = options.schema,\\n        fieldMap = options.fieldMap; // Debounced change\\n    // const change = () => {\\n    //   this.rebuildState();\\n    //   this.emit(\\'change\\');\\n    // };\\n    // this.change = debounce(change, 250);\\n    // Create new ajv instance if passed\\n\\n    _this.ajv = ajv ? new ajv({\\n      allErrors: true\\n    }) : null;\\n    _this.ajvValidate = ajv ? _this.ajv.compile(schema) : null; // Add field map ( defaults to our field map )\\n\\n    _this.fieldMap = fieldMap || defaultFieldMap; // Map will store all fields by id\\n    // Key => uuid\\n    // Val => fieldObj\\n    // Why? so the form can control the fields!\\n\\n    _this.fieldsById = new Map(); // Map will store all fields by name\\n    // Key => fieldName - example: \"foo.bar[3].baz\"\\n    // Val => fieldObj\\n    // Why? so the form can control the fields!\\n\\n    _this.fieldsByName = {\\n      get: function get(name) {\\n        var fieldByName; // TODO speed this up maybe\\n\\n        _this.fieldsById.forEach(function (value) {\\n          if (value && value.field === name) {\\n            fieldByName = value;\\n          }\\n        });\\n\\n        return fieldByName;\\n      }\\n    }; // Map to store whos on the screen\\n\\n    _this.onScreen = {}; // Map to store fields being removed\\n\\n    _this.expectedRemovals = {};\\n    _this.pulledOut = {}; // Map of saved values\\n\\n    _this.savedValues = {}; // Initialize the controller state\\n\\n    _this.state = {\\n      pristine: true,\\n      dirty: false,\\n      invalid: false,\\n      submits: 0,\\n      step: 0,\\n      validating: 0,\\n      submitting: false,\\n      values: {},\\n      errors: {},\\n      touched: {}\\n    }; // Initialize a dummy field ( see getField for example use )\\n\\n    _this.dummyField = {\\n      fieldApi: {\\n        setValue: noop,\\n        setTouched: noop,\\n        setError: noop,\\n        reset: noop,\\n        validate: noop,\\n        getValue: noop,\\n        getTouched: noop,\\n        getError: noop,\\n        getFieldState: noop,\\n        checkRelevant: noop\\n      }\\n    }; // Bind functions that will be called externally\\n\\n    _this.deregister = _this.deregister.bind(_assertThisInitialized(_this));\\n    _this.register = _this.register.bind(_assertThisInitialized(_this));\\n    _this.getValue = _this.getValue.bind(_assertThisInitialized(_this));\\n    _this.getTouched = _this.getTouched.bind(_assertThisInitialized(_this));\\n    _this.getError = _this.getError.bind(_assertThisInitialized(_this));\\n    _this.getErrors = _this.getErrors.bind(_assertThisInitialized(_this));\\n    _this.setValue = _this.setValue.bind(_assertThisInitialized(_this));\\n    _this.getValues = _this.getValues.bind(_assertThisInitialized(_this));\\n    _this.getStep = _this.getStep.bind(_assertThisInitialized(_this));\\n    _this.setStep = _this.setStep.bind(_assertThisInitialized(_this));\\n    _this.back = _this.back.bind(_assertThisInitialized(_this));\\n    _this.next = _this.next.bind(_assertThisInitialized(_this));\\n    _this.setCurrent = _this.setCurrent.bind(_assertThisInitialized(_this));\\n    _this.setTouched = _this.setTouched.bind(_assertThisInitialized(_this));\\n    _this.setError = _this.setError.bind(_assertThisInitialized(_this));\\n    _this.setFormError = _this.setFormError.bind(_assertThisInitialized(_this));\\n    _this.submitForm = _this.submitForm.bind(_assertThisInitialized(_this));\\n    _this.reset = _this.reset.bind(_assertThisInitialized(_this));\\n    _this.update = _this.update.bind(_assertThisInitialized(_this));\\n    _this.validate = _this.validate.bind(_assertThisInitialized(_this));\\n    _this.screenValid = _this.screenValid.bind(_assertThisInitialized(_this));\\n    _this.keyDown = _this.keyDown.bind(_assertThisInitialized(_this));\\n    _this.getField = _this.getField.bind(_assertThisInitialized(_this));\\n    _this.getInitialValue = _this.getInitialValue.bind(_assertThisInitialized(_this));\\n    _this.setInitialValue = _this.setInitialValue.bind(_assertThisInitialized(_this));\\n    _this.getOptions = _this.getOptions.bind(_assertThisInitialized(_this));\\n    _this.getFormState = _this.getFormState.bind(_assertThisInitialized(_this));\\n    _this.expectRemoval = _this.expectRemoval.bind(_assertThisInitialized(_this));\\n    _this.getSavedValue = _this.getSavedValue.bind(_assertThisInitialized(_this));\\n    _this.removeSavedState = _this.removeSavedState.bind(_assertThisInitialized(_this));\\n    _this.getDerrivedValue = _this.getDerrivedValue.bind(_assertThisInitialized(_this));\\n    _this.setValues = _this.setValues.bind(_assertThisInitialized(_this));\\n    _this.resetField = _this.resetField.bind(_assertThisInitialized(_this));\\n    _this.fieldExists = _this.fieldExists.bind(_assertThisInitialized(_this));\\n    _this.validateField = _this.validateField.bind(_assertThisInitialized(_this));\\n    _this.notify = _this.notify.bind(_assertThisInitialized(_this));\\n    _this.validating = _this.validating.bind(_assertThisInitialized(_this));\\n    _this.validated = _this.validated.bind(_assertThisInitialized(_this)); // this.change = this.change.bind(this);\\n    // this.clear = this.clear.bind(this);\\n    // Updater will be used by fields to update and register\\n\\n    _this.updater = {\\n      register: _this.register,\\n      deregister: _this.deregister,\\n      getField: _this.getField,\\n      update: _this.update,\\n      // clear: this.clear,\\n      fieldMap: _this.fieldMap,\\n      setValue: function setValue(fieldId, value) {\\n        var emit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\\n\\n        var field = _this.fieldsById.get(fieldId);\\n\\n        if (!field.shadow) {\\n          ObjectMap.set(_this.state.values, field.field, field.fieldApi.getValue());\\n        }\\n\\n        if (!field.fieldApi.relevant(_this.state.values)) {\\n          ObjectMap[\"delete\"](_this.state.values, field.field);\\n        } // Cleanup phase to get rid of irrelevant fields\\n        // Also evaluate relevance on all fields\\n\\n\\n        _this.fieldsById.forEach(function (f) {\\n          // If a fields within an irrelivant step then remove it\\n          // Otherwise, check to see if its relevant and only remove if keep state is false\\n          var newRel = f.fieldApi.checkRelevant();\\n\\n          if (!f.fieldApi.multistepRelevant(_this.state.values) || !newRel && !f.keepState) {\\n            ObjectMap[\"delete\"](_this.state.values, f.field);\\n            ObjectMap[\"delete\"](_this.state.touched, f.field);\\n            ObjectMap[\"delete\"](_this.state.errors, f.field);\\n          }\\n        });\\n\\n        if (emit) {\\n          _this.emit(\\'change\\');\\n\\n          _this.emit(\\'value\\', field.field, value);\\n        }\\n      },\\n      setTouched: function setTouched(fieldId, touch) {\\n        var emit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\\n\\n        var field = _this.fieldsById.get(fieldId);\\n\\n        if (!field.shadow && field.fieldApi.getIsRelevant()) {\\n          ObjectMap.set(_this.state.touched, field.field, field.fieldApi.getTouched());\\n        } // Shadow values override unless undefined\\n\\n\\n        if (field.shadow && field.fieldApi.getError() != undefined && field.fieldApi.relevant(_this.state.values)) {\\n          ObjectMap.set(_this.state.touched, field.field, field.fieldApi.getTouched());\\n        }\\n\\n        if (emit) {\\n          _this.emit(\\'change\\'); //this.emit(\\'touch\\', field.field, touch);\\n\\n        }\\n      },\\n      setError: function setError(fieldId, error) {\\n        var emit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\\n\\n        var field = _this.fieldsById.get(fieldId);\\n\\n        if (!field.shadow && field.fieldApi.getIsRelevant()) {\\n          ObjectMap.set(_this.state.errors, field.field, field.fieldApi.getError());\\n        } // Shadow values override unless undefined\\n\\n\\n        var currentError = ObjectMap.get(_this.state.errors, field.field);\\n\\n        if (field.shadow && field.fieldApi.getError() != undefined && field.fieldApi.relevant(_this.state.values)) {\\n          ObjectMap.set(_this.state.errors, field.field, field.fieldApi.getError());\\n        } // Special case for attempting to set shadow to undefiend\\n        else if (field.shadow && field.fieldApi.getError() === undefined && field.fieldApi.relevant(_this.state.values) && // TODO maybe check if object or array\\n          typeof currentError === \\'string\\') {\\n            ObjectMap.set(_this.state.errors, field.field, field.fieldApi.getError());\\n          }\\n\\n        if (emit) {\\n          _this.emit(\\'change\\'); //this.emit(\\'error\\', field.field, error);\\n\\n        }\\n      },\\n      expectRemoval: _this.expectRemoval,\\n      getInitialValue: _this.getInitialValue\\n    }; // Define the formApi\\n\\n    _this.formApi = {\\n      setValue: _this.setValue,\\n      setTouched: _this.setTouched,\\n      setError: _this.setError,\\n      setFormError: _this.setFormError,\\n      setValues: _this.setValues,\\n      setInitialValue: _this.setInitialValue,\\n      getValue: _this.getValue,\\n      getTouched: _this.getTouched,\\n      getError: _this.getError,\\n      reset: _this.reset,\\n      submitForm: _this.submitForm,\\n      getState: _this.getFormState,\\n      getValues: _this.getValues,\\n      getFullField: _this.getFullField,\\n      fieldExists: _this.fieldExists,\\n      getInitialValue: _this.getInitialValue,\\n      validate: _this.validate,\\n      validateField: _this.validateField,\\n      screenValid: _this.screenValid,\\n      resetField: _this.resetField,\\n      getOptions: _this.getOptions,\\n      emitter: _assertThisInitialized(_this),\\n      getSavedValue: _this.getSavedValue,\\n      removeSavedState: _this.removeSavedState,\\n      getDerrivedValue: _this.getDerrivedValue,\\n      getStep: _this.getStep,\\n      setStep: _this.setStep,\\n      next: _this.next,\\n      back: _this.back,\\n      setCurrent: _this.setCurrent,\\n      validated: _this.validated,\\n      validating: _this.validating\\n    };\\n\\n    _this.on(\\'value\\', function (field) {\\n      // The forms values have changed so we want to clear form level error\\n      delete _this.state.error;\\n\\n      _this.notify(field);\\n    });\\n\\n    return _this;\\n  }\\n  /* ---------------------------------- Setters ---------------------------------- */\\n\\n\\n  _createClass(FormController, [{\\n    key: \"setOptions\",\\n    value: function setOptions(options) {\\n      this.options = options;\\n    }\\n  }, {\\n    key: \"setValue\",\\n    value: function setValue(name, value, options) {\\n      this.getField(name).fieldApi.setValue(value, null, _objectSpread2({\\n        allowEmptyString: this.options.allowEmptyStrings\\n      }, options));\\n    }\\n  }, {\\n    key: \"setTouched\",\\n    value: function setTouched(name, value) {\\n      this.getField(name).fieldApi.setTouched(value);\\n    }\\n  }, {\\n    key: \"setError\",\\n    value: function setError(name, value) {\\n      this.getField(name).fieldApi.setError(value);\\n    }\\n  }, {\\n    key: \"setFormError\",\\n    value: function setFormError(value) {\\n      this.state.error = value;\\n      this.emit(\\'change\\');\\n    }\\n  }, {\\n    key: \"validating\",\\n    value: function validating() {\\n      this.state.validating = this.state.validating + 1;\\n      this.emit(\\'change\\');\\n    }\\n  }, {\\n    key: \"validated\",\\n    value: function validated(name, error) {\\n      // Decrement the validating\\n      this.state.validating = this.state.validating - 1; // Set the error if there is not already one ( sync error first )\\n\\n      if (!this.getError(name)) {\\n        this.setError(name, error);\\n      } // If we are not still validating, and we were submitting, then submit form\\n      // If we are async validating then dont submit yet\\n\\n\\n      if (this.state.validating > 0) {\\n        this.emit(\\'change\\');\\n        return;\\n      } // If we were submitting\\n\\n\\n      if (this.state.submitting) {\\n        // Check validity and perform submission if valid\\n        if (this.valid()) {\\n          debug$2(\\'Submit\\', this.state);\\n          this.emit(\\'submit\\');\\n        } else {\\n          debug$2(\\'Submit\\', this.state);\\n          this.emit(\\'failure\\');\\n        }\\n\\n        this.state.submitting = false;\\n      }\\n\\n      this.emit(\\'change\\');\\n    }\\n  }, {\\n    key: \"setStep\",\\n    value: function setStep(value) {\\n      this.state.step = value;\\n      this.emit(\\'change\\');\\n    }\\n  }, {\\n    key: \"setCurrent\",\\n    value: function setCurrent(component) {\\n      this.state.Current = component;\\n      this.emit(\\'change\\');\\n    }\\n  }, {\\n    key: \"back\",\\n    value: function back(prevComponent) {\\n      this.state.step = this.state.step - 1;\\n      this.state.Current = prevComponent;\\n      this.emit(\\'change\\');\\n    }\\n  }, {\\n    key: \"next\",\\n    value: function next(nextComponent) {\\n      // Validate the entire form\\n      this.validate(); // If fields on the screen ( currently rendered ) are valid move on\\n\\n      if (this.screenValid()) {\\n        this.state.step = this.state.step + 1;\\n        this.state.Current = nextComponent;\\n      } // State will have changed\\n\\n\\n      this.emit(\\'change\\');\\n    }\\n  }, {\\n    key: \"setInitialValue\",\\n    value: function setInitialValue(field, value) {\\n      ObjectMap.set(this.options.initialValues, field, value);\\n    }\\n    /* ---------------------------------- Getters ---------------------------------- */\\n\\n    /**\\n     * Generate the external form state that will be exposed to the users\\n     *\\n     * @returns Form State\\n     */\\n\\n  }, {\\n    key: \"getFormState\",\\n    value: function getFormState() {\\n      debug$2(\\'Returning form state\\');\\n      return _objectSpread2(_objectSpread2({}, this.state), {}, {\\n        pristine: this.pristine(),\\n        dirty: this.dirty(),\\n        invalid: this.invalid()\\n      });\\n    } // rebuildState() {\\n    //   debug(\\'Generating form state\\');\\n    //   // Rebuild values, errors, and touched\\n    //   const values = {};\\n    //   const errors = {};\\n    //   const touched = {};\\n    //   this.fieldsById.forEach(field => {\\n    //     if (!field.shadow) {\\n    //       // Get the values from the field\\n    //       const value = field.fieldApi.getValue();\\n    //       const error = field.fieldApi.getError();\\n    //       const t = field.fieldApi.getTouched();\\n    //       // Set the value\\n    //       ObjectMap.set(values, field.field, value);\\n    //       ObjectMap.set(errors, field.field, error);\\n    //       ObjectMap.set(touched, field.field, t);\\n    //       // console.log(\\'SETTING\\', field.field);\\n    //     }\\n    //   });\\n    //   this.state = {\\n    //     ...this.state,\\n    //     values,\\n    //     errors,\\n    //     touched,\\n    //     pristine: this.pristine(),\\n    //     dirty: this.dirty(),\\n    //     invalid: this.invalid()\\n    //   };\\n    // }\\n\\n  }, {\\n    key: \"getFormApi\",\\n    value: function getFormApi() {\\n      return this.formApi;\\n    }\\n  }, {\\n    key: \"getDerrivedValue\",\\n    value: function getDerrivedValue(name) {\\n      var values = this.getValues();\\n      return ObjectMap.get(values, name);\\n    }\\n  }, {\\n    key: \"getValue\",\\n    value: function getValue(name) {\\n      var value = this.getField(name).fieldApi.getValue();\\n      debug$2(\\'Getting value for\\', name, value);\\n      return value;\\n    }\\n  }, {\\n    key: \"getTouched\",\\n    value: function getTouched(field) {\\n      var touched = this.getField(field).fieldApi.getTouched();\\n      debug$2(\\'Getting touched for\\', field, touched);\\n      return touched;\\n    }\\n  }, {\\n    key: \"getError\",\\n    value: function getError(field) {\\n      var error = this.getField(field).fieldApi.getError();\\n      debug$2(\\'Getting error for\\', field, error);\\n      return error;\\n    }\\n  }, {\\n    key: \"getValues\",\\n    value: function getValues() {\\n      debug$2(\\'Gettings values\\');\\n      return this.state.values;\\n    }\\n  }, {\\n    key: \"getAllTouched\",\\n    value: function getAllTouched() {\\n      debug$2(\\'Gettings touched\\');\\n      return this.state.touched;\\n    }\\n  }, {\\n    key: \"getErrors\",\\n    value: function getErrors() {\\n      debug$2(\\'Gettings errors\\');\\n      return this.state.errors;\\n    }\\n  }, {\\n    key: \"getOptions\",\\n    value: function getOptions() {\\n      return this.options;\\n    }\\n  }, {\\n    key: \"getStep\",\\n    value: function getStep() {\\n      return this.state.step;\\n    }\\n  }, {\\n    key: \"getSavedValue\",\\n    value: function getSavedValue(name) {\\n      var field = this.fieldsByName.get(name);\\n\\n      if (field && field.shadow) {\\n        return ObjectMap.get(this.savedValues, \"shadow-\".concat(name));\\n      }\\n\\n      return ObjectMap.get(this.savedValues, name);\\n    }\\n  }, {\\n    key: \"removeSavedState\",\\n    value: function removeSavedState(name) {\\n      var field = this.fieldsByName.get(name);\\n\\n      if (field && field.shadow) {\\n        return ObjectMap[\"delete\"](this.savedValues, \"shadow-\".concat(name));\\n      }\\n\\n      return ObjectMap[\"delete\"](this.savedValues, name);\\n    }\\n  }, {\\n    key: \"getFullField\",\\n    value: function getFullField(field) {\\n      return field;\\n    }\\n  }, {\\n    key: \"getInitialValue\",\\n    value: function getInitialValue(field) {\\n      return ObjectMap.get(this.options.initialValues, field);\\n    }\\n  }, {\\n    key: \"getField\",\\n    value: function getField(name) {\\n      debug$2(\\'Getting Field\\', name);\\n      var field = this.fieldsByName.get(name);\\n\\n      if (!field) {\\n        // eslint-disable-next-line no-console\\n        console.warn(\"Attempting to get field \".concat(name, \" but it does not exist\")); // Prevent app from crashing\\n\\n        return this.dummyField;\\n      }\\n\\n      return field;\\n    } // Notify other fields\\n\\n  }, {\\n    key: \"notify\",\\n    value: function notify(field) {\\n      var _this2 = this;\\n\\n      // Example field - siblings[0].married\\n      // Get the notifier\\n      var notifier = this.getField(field); // If we have a list we must notify each one\\n\\n      if (notifier && notifier.notify) {\\n        // Example: [\\'spouse\\']\\n        notifier.notify.forEach(function (fieldName) {\\n          // Get the field toNotify\\n          var JSPAN = \".\".concat(field);\\n          var path = \"\".concat(JSPAN.replace(/(.*)[.[].*/, \\'$1\\'), \".\").concat(fieldName).slice(1); // console.log(\\'PATH\\', path);\\n          // Example path - siblings[0].spouse\\n\\n          var toNotify = _this2.getField(path);\\n\\n          if (toNotify) {\\n            debug$2(\\'Notifying\\', toNotify.field);\\n            toNotify.fieldApi.validate();\\n            toNotify.fieldApi.checkRelevant();\\n          }\\n        });\\n      }\\n    }\\n  }, {\\n    key: \"validateField\",\\n    value: function validateField(field) {\\n      this.getField(field).fieldApi.validate();\\n    }\\n  }, {\\n    key: \"resetField\",\\n    value: function resetField(field) {\\n      this.getField(field).fieldApi.reset();\\n    }\\n  }, {\\n    key: \"fieldExists\",\\n    value: function fieldExists(field) {\\n      return this.fieldsByName.get(field) != null;\\n    }\\n  }, {\\n    key: \"valid\",\\n    value: function valid() {\\n      var errors = this.getErrors();\\n      return !!(ObjectMap.empty(errors) && !this.state.error);\\n    }\\n  }, {\\n    key: \"screenValid\",\\n    value: function screenValid() {\\n      // Return false if any of the fields on the screen are invalid\\n      var error = Object.entries(this.onScreen).some(function (_ref) {\\n        var _ref2 = _slicedToArray(_ref, 2),\\n            field = _ref2[1];\\n\\n        return field.fieldApi.getError();\\n      });\\n      return !error;\\n    }\\n  }, {\\n    key: \"invalid\",\\n    value: function invalid() {\\n      var errors = this.getErrors();\\n      return !!(!ObjectMap.empty(errors) || this.state.error);\\n    }\\n  }, {\\n    key: \"pristine\",\\n    value: function pristine() {\\n      var touched = this.getAllTouched();\\n      var values = this.getValues();\\n      return ObjectMap.empty(touched) && ObjectMap.empty(values);\\n    }\\n  }, {\\n    key: \"dirty\",\\n    value: function dirty() {\\n      return !this.pristine();\\n    }\\n  }, {\\n    key: \"reset\",\\n    value: function reset() {\\n      debug$2(\\'Resetting\\'); // So because all fields controll themselves and, \"inform\", this controller\\n      // of their changes, we need to literally itterate through all registered fields\\n      // and reset them. Not a big deal but very important to remember that you cant simply\\n      // reset this controllers state!\\n\\n      this.fieldsById.forEach(function (field) {\\n        field.fieldApi.reset({\\n          preventUpdate: true\\n        });\\n      });\\n      this.emit(\\'reset\\');\\n      this.emit(\\'change\\');\\n    }\\n  }, {\\n    key: \"setValues\",\\n    value: function setValues(values) {\\n      debug$2(\\'Setting values\\'); // So we because all fields controll themselves and, \"inform\", this controller\\n      // of their changes, we need to literally itterate through all registered fields\\n      // and set them. Not a big deal but very important to remember that you cant simply\\n      // set this controllers state!\\n\\n      this.fieldsById.forEach(function (field) {\\n        // Initialize the values if it needs to be\\n        var value = ObjectMap.get(values, field.field);\\n\\n        if (value !== undefined) {\\n          field.fieldApi.setValue(value, null, {\\n            preventUpdate: true\\n          });\\n        }\\n      });\\n      this.emit(\\'change\\');\\n    }\\n  }, {\\n    key: \"validate\",\\n    value: function validate() {\\n      var _this3 = this;\\n\\n      debug$2(\\'Validating all fields\\');\\n      var values = this.getValues(); // Validate schema if needed\\n\\n      if (this.options.validationSchema) {\\n        var errors = validateYupSchema(this.options.validationSchema, values); // So we because all fields controll themselves and, \"inform\", this controller\\n        // of their changes, we need to literally itterate through all registered fields\\n        // and set them. Not a big deal but very important to remember that you cant simply\\n        // set this controllers state!\\n\\n        this.fieldsById.forEach(function (field) {\\n          // Check to see if there is an error to set\\n          // Note: we use has becuause value may be there but undefined\\n          if (ObjectMap.has(errors, field.field)) {\\n            var error = ObjectMap.get(errors, field.field); // If there is an error then set it\\n\\n            _this3.setError(field.field, error);\\n          } else {\\n            // If we are doing schema validation then we need to clear out any old errors\\n            _this3.setError(field.field, undefined);\\n          }\\n        });\\n      } // Validate AJV schema if needed\\n\\n\\n      if (this.options.schema && this.options.ajv) {\\n        var _errors = validateAjvSchema(this.ajvValidate, values); // So we because all fields controll themselves and, \"inform\", this controller\\n        // of their changes, we need to literally itterate through all registered fields\\n        // and set them. Not a big deal but very important to remember that you cant simply\\n        // set this controllers state!\\n\\n\\n        this.fieldsById.forEach(function (field) {\\n          // Check to see if there is an error to set\\n          // Note: we use has becuause value may be there but undefined\\n          if (ObjectMap.has(_errors, field.field)) {\\n            var error = ObjectMap.get(_errors, field.field); // If there is an error then set it\\n\\n            _this3.setError(field.field, error);\\n          } else {\\n            // If we are doing schema validation then we need to clear out any old errors\\n            _this3.setError(field.field, undefined);\\n          }\\n        });\\n      } // Itterate through and call validate on every field\\n\\n\\n      this.fieldsById.forEach(function (field) {\\n        field.fieldApi.validate(values); // Second param to prevent validation\\n\\n        field.fieldApi.setTouched(true, true);\\n      }); // Call the form level validation if its present\\n\\n      if (this.options.validate) {\\n        var res = this.options.validate(values);\\n        this.setFormError(res);\\n      } // Call the forms field level validation\\n\\n\\n      if (this.options.validateFields) {\\n        var _errors2 = this.options.validateFields(values); // So we because all fields controll themselves and, \"inform\", this controller\\n        // of their changes, we need to literally itterate through all registered fields\\n        // and set them. Not a big deal but very important to remember that you cant simply\\n        // set this controllers state!\\n\\n\\n        this.fieldsById.forEach(function (field) {\\n          // Check to see if there is an error to set\\n          // Note: we use has becuause value may be there but undefined\\n          if (ObjectMap.has(_errors2, field.field)) {\\n            var error = ObjectMap.get(_errors2, field.field); // If there is an error then set it\\n\\n            _this3.setError(field.field, error);\\n          }\\n        });\\n      }\\n    }\\n  }, {\\n    key: \"asyncValidate\",\\n    value: function asyncValidate() {\\n      debug$2(\\'Async Validating all fields\\');\\n      var values = this.getValues(); // Itterate through and call validate on every field\\n\\n      this.fieldsById.forEach(function (field) {\\n        field.fieldApi.asyncValidate(values);\\n      });\\n    }\\n  }, {\\n    key: \"keyDown\",\\n    value: function keyDown(e) {\\n      // If preventEnter then return\\n      if (e.keyCode == 13 && this.options.preventEnter) {\\n        e.preventDefault(e);\\n        return false;\\n      }\\n    }\\n  }, {\\n    key: \"submitForm\",\\n    value: function submitForm(e) {\\n      // Incriment number of submit attempts\\n      this.state.submits = this.state.submits + 1;\\n      this.state.submitting = true;\\n\\n      if (!this.options.dontPreventDefault && e) {\\n        // Prevent default browser form submission\\n        e.preventDefault(e);\\n      } // Validate the form\\n\\n\\n      this.validate(); // Emit a change\\n\\n      this.emit(\\'change\\'); // Trigger all async validations\\n\\n      this.asyncValidate(); // If we are async validating then dont submit yet\\n\\n      if (this.state.validating > 0) {\\n        return;\\n      } // Check validity and perform submission if valid\\n\\n\\n      if (this.valid()) {\\n        debug$2(\\'Submit\\', this.state);\\n        this.emit(\\'submit\\');\\n      } else {\\n        debug$2(\\'Submit\\', this.state);\\n        this.emit(\\'failure\\');\\n      }\\n\\n      this.state.submitting = false;\\n      this.emit(\\'change\\');\\n    }\\n    /* ---------------- Updater Functions (used by fields) ---------------- */\\n    // ADDED initialRender parameter because of react 16.13.0 warning that does not like\\n    // setting initial value during first render\\n\\n  }, {\\n    key: \"register\",\\n    value: function register(id, field, initialRender) {\\n      var name = field.field,\\n          state = field.state;\\n      debug$2(\\'Register ID:\\', id, \\'Name:\\', name, state, \\'Initial\\', initialRender); // Example foo.bar.baz[3].baz >>>> foo.bar.baz[3]\\n\\n      var magicValue = name.slice(0, name.lastIndexOf(\\'[\\') != -1 ? name.lastIndexOf(\\']\\') + 1 : name.length); // Field might be coming back after render remove old field\\n\\n      var alreadyRegistered;\\n      this.fieldsById.forEach(function (value, key) {\\n        if (value && value.field === name) {\\n          alreadyRegistered = key;\\n        }\\n      });\\n\\n      if ( //!this.expectedRemovals[magicValue] &&\\n      alreadyRegistered && (field.keepState || field.inMultistep)) {\\n        debug$2(\\'Already Registered\\', name);\\n        this.fieldsById[\"delete\"](alreadyRegistered);\\n      } else if ( //!this.expectedRemovals[magicValue] &&\\n      alreadyRegistered && (!field.keepState || !field.inMultistep)) {\\n        // eslint-disable-next-line no-console\\n        console.warn(\\'Check to make sure you have not registered two fields with the fieldName\\', name);\\n      }\\n\\n      debug$2(\\'Fields Registered\\', this.fieldsById.size); // The field is on the screen\\n\\n      this.onScreen[id] = field; // Always register the field\\n\\n      this.fieldsById.set(id, field); // Always clear out expected removals when a reregistering array field comes in\\n\\n      debug$2(\\'clearing expected removal\\', magicValue);\\n      delete this.expectedRemovals[magicValue];\\n      delete this.pulledOut[magicValue]; // The field is a shadow field ooo spooky so dont set anything\\n\\n      if (field.shadow) {\\n        return;\\n      } // Update the forms state right away\\n\\n\\n      this.updater.setValue(id, field.fieldApi.getValue(), false);\\n      this.updater.setError(id, field.fieldApi.getError(), false);\\n      this.updater.setTouched(id, field.fieldApi.getTouched(), false); // We register field right away but dont want it to triger a rerender\\n\\n      if (!initialRender) {\\n        this.emit(\\'change\\');\\n      }\\n    }\\n  }, {\\n    key: \"deregister\",\\n    value: function deregister(id) {\\n      var field = this.fieldsById.get(id);\\n      var name = field.field;\\n      debug$2(\\'Deregister\\', id, name); // The field is off the screen\\n\\n      delete this.onScreen[id]; // Example foo.bar.baz[3] --\\x3e foo.bar.baz[3].baz && foo.bar.baz[3].taz.raz[4].naz\\n\\n      var expectedRemoval = isExpected(name, this.expectedRemovals); // Example foo.bar.baz[3].baz >>>> foo.bar.baz[3]\\n\\n      var magicValue = name.slice(0, name.lastIndexOf(\\'[\\') != -1 ? name.lastIndexOf(\\']\\') + 1 : name.length); // If the fields state is to be kept then save the value\\n\\n      if ( // We are in a multistep or want to keep the state\\n      (field.keepState || field.inMultistep) && // We are NOT expected to be removed\\n      !expectedRemoval) {\\n        // TODO ?? Exception where the field is irrelivant AND keep state was not passed ??\\n        debug$2(\"Saving field \".concat(name, \"\\'s value\"), field.fieldApi.getFieldState());\\n\\n        if (!field.shadow) {\\n          ObjectMap.set(this.savedValues, name, field.fieldApi.getFieldState());\\n        } else {\\n          // We are shadow field and will store this value in the shadows\\n          ObjectMap.set(this.savedValues, \"shadow-\".concat(name), field.fieldApi.getFieldState());\\n        }\\n      } // Remove if its an expected removal OR we dont have keep state\\n\\n\\n      if ( // This field was expected to be removed\\n      expectedRemoval || // This field does not have keepstate and is NOT within a multistep\\n      !field.keepState && !field.inMultistep || // If field is in multistep then we would always keep due to field.inMultistep\\n      // BUT.. we need to also check if the field is irrelivant\\n      // because if it gets unmounted, even if its part of a multistep, we want to remove\\n      // the field completley, unless keep state was passed.\\n      !field.fieldApi.getIsRelevant() && !field.keepState) {\\n        // Remove the field completley\\n        debug$2(\\'Removing field\\', name);\\n        this.fieldsById[\"delete\"](id); // Clean up state only if its not expected removal, otherwise we will just pull it out\\n\\n        if (!expectedRemoval) {\\n          ObjectMap[\"delete\"](this.state.values, name);\\n          ObjectMap[\"delete\"](this.state.touched, name);\\n          ObjectMap[\"delete\"](this.state.errors, name);\\n\\n          if (!field.shadow) {\\n            ObjectMap[\"delete\"](this.savedValues, name);\\n          } else {\\n            ObjectMap[\"delete\"](this.savedValues, \"shadow-\".concat(name));\\n          }\\n        } // If we expected this removal then pullOut\\n\\n\\n        if (expectedRemoval && this.pulledOut[magicValue]) {\\n          debug$2(\\'Pulling out\\', name, \\'with magic value\\', magicValue);\\n          ObjectMap.pullOut(this.state.values, magicValue);\\n          ObjectMap.pullOut(this.state.touched, magicValue);\\n          ObjectMap.pullOut(this.state.errors, magicValue);\\n          ObjectMap.pullOut(this.savedValues, magicValue); // console.log(\\'Pull1\\', this.state.values);\\n          // console.log(\\'Pull2\\', this.savedValues);\\n\\n          delete this.pulledOut[magicValue];\\n        }\\n      }\\n\\n      this.emit(\\'change\\');\\n    }\\n  }, {\\n    key: \"expectRemoval\",\\n    value: function expectRemoval(name) {\\n      debug$2(\\'Expecting removal of\\', name);\\n      this.expectedRemovals[name] = true;\\n      this.pulledOut[name] = true;\\n    }\\n  }, {\\n    key: \"update\",\\n    value: function update(id, field, oldName) {\\n      debug$2(\\'Update\\', id, field.field, oldName, field.fieldState.value); // this.change();\\n      // Update the error touched and values of this field\\n\\n      var value = field.fieldApi.getValue();\\n      var error = field.fieldApi.getError();\\n      var t = field.fieldApi.getTouched(); // Clear the old value out\\n\\n      var oldField = this.fieldsByName.get(oldName); // Only clear if we had an old name ( our name changed )\\n      // %% the oldField is gone!\\n\\n      if (oldName && !oldField) {\\n        // Setting nothing sets to undefined and does NOT pull out\\n        ObjectMap.set(this.state.values, oldName);\\n        ObjectMap.set(this.state.errors, oldName);\\n        ObjectMap.set(this.state.touched, oldName);\\n      } // Set the value\\n\\n\\n      ObjectMap.set(this.state.values, field.field, value);\\n      ObjectMap.set(this.state.errors, field.field, error);\\n      ObjectMap.set(this.state.touched, field.field, t);\\n      this.emit(\\'change\\');\\n    }\\n  }]);\\n\\n  return FormController;\\n}(events__WEBPACK_IMPORTED_MODULE_1__[\"EventEmitter\"]);\\n\\nvar logger$5 = debug(\\'informed:FormProvider\\' + \\'\\\\t\\\\t\\');\\n\\nvar FormProvider = function FormProvider(_ref) {\\n  var children = _ref.children,\\n      formApi = _ref.formApi,\\n      formController = _ref.formController,\\n      formState = _ref.formState,\\n      rest = _objectWithoutProperties(_ref, [\"children\", \"formApi\", \"formController\", \"formState\"]);\\n\\n  logger$5(\\'Render FormProvider\\');\\n\\n  if (formApi) {\\n    logger$5(\\'Render FormProvider with given values\\');\\n    /* --- Create Provider with given values and render Content --- */\\n\\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormRegisterContext.Provider, {\\n      value: formController.updater\\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormApiContext.Provider, {\\n      value: formApi\\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormStateContext.Provider, {\\n      value: formState\\n    }, children)));\\n  }\\n\\n  logger$5(\\'Render FormProvider with generated values\\');\\n  /* --- User did not pass values so create them --- */\\n\\n  var value = useForm(rest);\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormRegisterContext.Provider, {\\n    value: value.formController.updater\\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormApiContext.Provider, {\\n    value: value.formApi\\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormStateContext.Provider, {\\n    value: value.formState\\n  }, children)));\\n};\\n\\nvar logger$6 = debug(\\'informed:useForm\\' + \\'\\\\t\\\\t\\');\\n\\nvar useForm = function useForm(_ref) {\\n  var dontPreventDefault = _ref.dontPreventDefault,\\n      initialValues = _ref.initialValues,\\n      validate = _ref.validate,\\n      validateFields = _ref.validateFields,\\n      allowEmptyStrings = _ref.allowEmptyStrings,\\n      preventEnter = _ref.preventEnter,\\n      getApi = _ref.getApi,\\n      apiRef = _ref.apiRef,\\n      onChange = _ref.onChange,\\n      onReset = _ref.onReset,\\n      onSubmit = _ref.onSubmit,\\n      onValueChange = _ref.onValueChange,\\n      onSubmitFailure = _ref.onSubmitFailure,\\n      validationSchema = _ref.validationSchema,\\n      schema = _ref.schema,\\n      ajv = _ref.ajv,\\n      fieldMap = _ref.fieldMap,\\n      onlyValidateSchema = _ref.onlyValidateSchema,\\n      userProps = _objectWithoutProperties(_ref, [\"dontPreventDefault\", \"initialValues\", \"validate\", \"validateFields\", \"allowEmptyStrings\", \"preventEnter\", \"getApi\", \"apiRef\", \"onChange\", \"onReset\", \"onSubmit\", \"onValueChange\", \"onSubmitFailure\", \"validationSchema\", \"schema\", \"ajv\", \"fieldMap\", \"onlyValidateSchema\"]);\\n\\n  logger$6(\\'Render useForm\\'); // Generate form controller options\\n\\n  var formControllerOptions = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useMemo\"])(function () {\\n    return {\\n      dontPreventDefault: dontPreventDefault,\\n      initialValues: initialValues,\\n      validate: validate,\\n      validateFields: validateFields,\\n      allowEmptyStrings: allowEmptyStrings,\\n      preventEnter: preventEnter,\\n      validationSchema: validationSchema,\\n      schema: schema,\\n      ajv: ajv,\\n      fieldMap: fieldMap\\n    };\\n  }, [dontPreventDefault, initialValues, validate, validateFields, allowEmptyStrings, preventEnter, validationSchema, schema, ajv, fieldMap]); // Create form controller\\n\\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(function () {\\n    return new FormController(formControllerOptions);\\n  }),\\n      _useState2 = _slicedToArray(_useState, 1),\\n      formController = _useState2[0]; // Update the options when they change\\n\\n\\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\\n    formController.setOptions(formControllerOptions);\\n  }, [formControllerOptions]); // Form state will be used to trigger rerenders\\n\\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(function () {\\n    return formController.getFormState();\\n  }),\\n      _useState4 = _slicedToArray(_useState3, 2),\\n      formState = _useState4[0],\\n      setFormState = _useState4[1]; // Register for events\\n\\n\\n  useIsomorphicLayoutEffect(function () {\\n    var onChangeHandler = function onChangeHandler() {\\n      return onChange && onChange(formController.getFormState());\\n    };\\n\\n    var onResetHandler = function onResetHandler() {\\n      return onReset && onReset();\\n    };\\n\\n    var onSubmitHandler = function onSubmitHandler() {\\n      return onSubmit && onSubmit(formController.getFormState().values);\\n    };\\n\\n    var onValueHandler = function onValueHandler() {\\n      return onValueChange && onValueChange(formController.getFormState().values);\\n    };\\n\\n    var onFailureHandler = function onFailureHandler() {\\n      return onSubmitFailure && onSubmitFailure(formController.getFormState().errors);\\n    }; // Register for events\\n\\n\\n    formController.on(\\'change\\', onChangeHandler);\\n    formController.on(\\'reset\\', onResetHandler);\\n    formController.on(\\'submit\\', onSubmitHandler);\\n    formController.on(\\'value\\', onValueHandler);\\n    formController.on(\\'failure\\', onFailureHandler); // Unregister events\\n\\n    return function () {\\n      formController.removeListener(\\'change\\', onChangeHandler);\\n      formController.removeListener(\\'reset\\', onResetHandler);\\n      formController.removeListener(\\'submit\\', onSubmitHandler);\\n      formController.removeListener(\\'value\\', onValueHandler);\\n      formController.removeListener(\\'failure\\', onFailureHandler);\\n    };\\n  }, [onChange, onReset, onSubmit, onValueChange, onSubmitFailure]); // Initialize code like constructor but not muhahah\\n\\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(function () {\\n    // Update the form state to trigger rerender!\\n    var onChangeHandlerRerender = function onChangeHandlerRerender() {\\n      logger$6(\\'Setting form state\\');\\n      setFormState(formController.getFormState());\\n    }; // const debounced = debounce(onChangeHandlerRerender, 250);\\n\\n\\n    formController.on(\\'change\\', onChangeHandlerRerender); // Give access to api outside\\n\\n    if (getApi) {\\n      getApi(formController.getFormApi());\\n    }\\n\\n    if (apiRef) {\\n      apiRef.current = formController.getFormApi();\\n    }\\n  }); // We dont want this to happen on every render so thats why useState is used here\\n\\n  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(function () {\\n    return formController.getFormApi();\\n  }),\\n      _useState6 = _slicedToArray(_useState5, 1),\\n      formApi = _useState6[0]; // TODO technically speaking this can be unsafe as there is circular dependency\\n  // between form provider and useForm.. Its ok because anyone that in theory\\n  // Uses a form provider and a use form hook themselves will never call the render\\n  // function created here... that being said I will look into fixing that warning\\n  // at some point :)\\n\\n\\n  var render = function render(children) {\\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormProvider, {\\n      formApi: formApi,\\n      formState: formState,\\n      formController: formController\\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, !children ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormFields, {\\n      schema: schema,\\n      onlyValidateSchema: onlyValidateSchema\\n    }) : children));\\n  };\\n\\n  return {\\n    formApi: formApi,\\n    formState: formState,\\n    formController: formController,\\n    render: render,\\n    userProps: userProps\\n  };\\n};\\n\\nvar debug$3 = debug(\\'informed:Form\\' + \\'\\\\t\\\\t\\');\\n\\nvar Form = function Form(_ref) {\\n  var children = _ref.children,\\n      renderProp = _ref.render,\\n      component = _ref.component,\\n      rest = _objectWithoutProperties(_ref, [\"children\", \"render\", \"component\"]);\\n\\n  debug$3(\\'Render FORM\\');\\n\\n  var _useForm = useForm(rest),\\n      formApi = _useForm.formApi,\\n      formController = _useForm.formController,\\n      formState = _useForm.formState,\\n      render = _useForm.render,\\n      userProps = _useForm.userProps;\\n\\n  var getContent = function getContent() {\\n    var props = {\\n      formState: formState,\\n      formApi: formApi\\n    };\\n\\n    if (component) {\\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(component, props, children);\\n    }\\n\\n    if (renderProp) {\\n      return renderProp(props);\\n    }\\n\\n    if (typeof children === \\'function\\') {\\n      return children(props);\\n    }\\n\\n    return children;\\n  };\\n  /* --- Render Content --- */\\n\\n\\n  return render( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"form\", _extends({}, userProps, {\\n    onReset: formController.reset,\\n    onSubmit: formController.submitForm,\\n    onKeyDown: formController.keyDown\\n  }), getContent()));\\n};\\n\\nvar buildScopedFormApi$1 = function buildScopedFormApi(scope, formApi) {\\n  return _objectSpread2(_objectSpread2({}, formApi), {}, {\\n    getValue: function getValue(field) {\\n      return formApi.getValue(\"\".concat(scope, \".\").concat(field));\\n    },\\n    getTouched: function getTouched(field) {\\n      return formApi.getTouched(\"\".concat(scope, \".\").concat(field));\\n    },\\n    getError: function getError(field) {\\n      return formApi.getError(\"\".concat(scope, \".\").concat(field));\\n    },\\n    setValue: function setValue(field, value) {\\n      return formApi.setValue(\"\".concat(scope, \".\").concat(field), value);\\n    },\\n    setTouched: function setTouched(field, value) {\\n      return formApi.setTouched(\"\".concat(scope, \".\").concat(field), value);\\n    },\\n    setError: function setError(field, value) {\\n      return formApi.setError(\"\".concat(scope, \".\").concat(field), value);\\n    },\\n    getInitialValue: function getInitialValue(field) {\\n      return formApi.getInitialValue(\"\".concat(scope, \".\").concat(field));\\n    },\\n    getFullField: function getFullField(field) {\\n      return \"\".concat(formApi.getFullField(scope), \".\").concat(field);\\n    }\\n  });\\n};\\n\\nvar buildScopedRegister = function buildScopedRegister(scope, formRegister) {\\n  var _register = formRegister.register,\\n      _deregister = formRegister.deregister,\\n      _setValue = formRegister.setValue,\\n      _setTouched = formRegister.setTouched,\\n      _setError = formRegister.setError,\\n      _update = formRegister.update,\\n      _getField = formRegister.getField,\\n      _expectRemoval = formRegister.expectRemoval,\\n      _getInitialValue = formRegister.getInitialValue,\\n      fieldMap = formRegister.fieldMap;\\n  return {\\n    register: function register(field) {\\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\\n        args[_key - 1] = arguments[_key];\\n      }\\n\\n      return _register.apply(void 0, [\"\".concat(scope, \".\").concat(field)].concat(args));\\n    },\\n    deregister: function deregister(field) {\\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\\n        args[_key2 - 1] = arguments[_key2];\\n      }\\n\\n      return _deregister.apply(void 0, [\"\".concat(scope, \".\").concat(field)].concat(args));\\n    },\\n    update: function update(field) {\\n      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\\n        args[_key3 - 1] = arguments[_key3];\\n      }\\n\\n      return _update.apply(void 0, [\"\".concat(scope, \".\").concat(field)].concat(args));\\n    },\\n    setValue: function setValue(field) {\\n      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\\n        args[_key4 - 1] = arguments[_key4];\\n      }\\n\\n      return _setValue.apply(void 0, [\"\".concat(scope, \".\").concat(field)].concat(args));\\n    },\\n    setTouched: function setTouched(field) {\\n      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\\n        args[_key5 - 1] = arguments[_key5];\\n      }\\n\\n      return _setTouched.apply(void 0, [\"\".concat(scope, \".\").concat(field)].concat(args));\\n    },\\n    setError: function setError(field) {\\n      for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\\n        args[_key6 - 1] = arguments[_key6];\\n      }\\n\\n      return _setError.apply(void 0, [\"\".concat(scope, \".\").concat(field)].concat(args));\\n    },\\n    getField: function getField(field) {\\n      for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\\n        args[_key7 - 1] = arguments[_key7];\\n      }\\n\\n      return _getField.apply(void 0, [\"\".concat(scope, \".\").concat(field)].concat(args));\\n    },\\n    expectRemoval: function expectRemoval(field) {\\n      for (var _len8 = arguments.length, args = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\\n        args[_key8 - 1] = arguments[_key8];\\n      }\\n\\n      return _expectRemoval.apply(void 0, [\"\".concat(scope, \".\").concat(field)].concat(args));\\n    },\\n    getInitialValue: function getInitialValue(field) {\\n      return _getInitialValue(\"\".concat(scope, \".\").concat(field));\\n    },\\n    fieldMap: fieldMap\\n  };\\n};\\n\\nvar Scope = function Scope(_ref) {\\n  var scope = _ref.scope,\\n      children = _ref.children;\\n  var formRegister = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useContext\"])(FormRegisterContext);\\n  var formApi = useFormApi();\\n  var formState = useFormState(); // VERY important to memoize the builders!\\n\\n  var scopedFormApi = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useMemo\"])(function () {\\n    return buildScopedFormApi$1(scope, formApi);\\n  }, [scope]);\\n  var scopedRegister = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useMemo\"])(function () {\\n    return buildScopedRegister(scope, formRegister);\\n  }, [scope]);\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormRegisterContext.Provider, {\\n    value: scopedRegister\\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormApiContext.Provider, {\\n    value: scopedFormApi\\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormStateContext.Provider, {\\n    value: formState\\n  }, children)));\\n};\\n\\nvar FormState = function FormState(props) {\\n  var formState = useFormState();\\n  var displayState = {};\\n\\n  if (Object.keys(props).length > 0) {\\n    Object.keys(props).forEach(function (key) {\\n      displayState[key] = formState[key];\\n    });\\n  } else {\\n    displayState = formState;\\n  }\\n\\n  var _displayState = displayState,\\n      pristine = _displayState.pristine,\\n      dirty = _displayState.dirty,\\n      invalid = _displayState.invalid,\\n      values = _displayState.values,\\n      errors = _displayState.errors,\\n      touched = _displayState.touched,\\n      validating = _displayState.validating,\\n      submitting = _displayState.submitting;\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"pre\", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"code\", null, JSON.stringify({\\n    pristine: pristine,\\n    dirty: dirty,\\n    invalid: invalid,\\n    values: values,\\n    errors: errors,\\n    touched: touched,\\n    validating: validating,\\n    submitting: submitting\\n  }, null, 2)));\\n};\\n\\nvar useMultistep = function useMultistep(_ref) {\\n  var initialStep = _ref.initialStep,\\n      multistepApiRef = _ref.multistepApiRef;\\n\\n  // Get the formApi\\n  var _useFormApi = useFormApi(),\\n      getValues = _useFormApi.getValues,\\n      validate = _useFormApi.validate,\\n      screenValid = _useFormApi.screenValid; // Track our steps by name\\n\\n\\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(new Map()),\\n      _useState2 = _slicedToArray(_useState, 1),\\n      stepsByName = _useState2[0]; // Define our state\\n\\n\\n  var _useStateWithGetter = useStateWithGetter({\\n    current: initialStep,\\n    steps: []\\n  }),\\n      _useStateWithGetter2 = _slicedToArray(_useStateWithGetter, 3),\\n      multistepState = _useStateWithGetter2[0],\\n      setMultistepState = _useStateWithGetter2[1],\\n      getMultistepState = _useStateWithGetter2[2]; // Define our api\\n\\n\\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(function () {\\n    var getCurrentStep = function getCurrentStep() {\\n      // Get the current state\\n      var _getMultistepState = getMultistepState(),\\n          current = _getMultistepState.current; // Get the current step\\n\\n\\n      var currentStep = stepsByName.get(current); // Return it\\n\\n      return currentStep;\\n    };\\n\\n    var api = {\\n      // Gets the whole state\\n      getState: function getState() {\\n        return getMultistepState();\\n      },\\n      // Gets just the current\\n      getCurrentStep: getCurrentStep,\\n      // Gets that step\\n      getStep: function getStep(name) {\\n        return stepsByName.get(name);\\n      },\\n      // Goes to next step\\n      next: function next() {\\n        // Validate the entire form\\n        validate(); // If fields on the screen ( currently rendered ) are valid move on\\n\\n        if (screenValid()) {\\n          // Get the current step\\n          var _getCurrentStep = getCurrentStep(),\\n              getNext = _getCurrentStep.getNext;\\n\\n          var next = getNext(); // Determine what the next step should be\\n\\n          var nextStep = typeof next === \\'function\\' ? next(getValues()) : next; // Determine if it has a next\\n\\n          if (nextStep) {\\n            setMultistepState(function (prev) {\\n              return _objectSpread2(_objectSpread2({}, prev), {}, {\\n                current: nextStep\\n              });\\n            });\\n          }\\n        }\\n      },\\n      // Goes to previous step\\n      back: function back() {\\n        // Get the current step\\n        var _getCurrentStep2 = getCurrentStep(),\\n            getPrevious = _getCurrentStep2.getPrevious;\\n\\n        var previous = getPrevious(); // Determine what the previous step should be\\n\\n        var previousStep = typeof previous === \\'function\\' ? previous(getValues()) : previous; // Determine if it has a previous\\n\\n        if (previousStep) {\\n          setMultistepState(function (prev) {\\n            return _objectSpread2(_objectSpread2({}, prev), {}, {\\n              current: previousStep\\n            });\\n          });\\n        }\\n      },\\n      // Goes to specified step\\n      setCurrent: function setCurrent(next) {\\n        // Determine if it has a next\\n        if (next) {\\n          setMultistepState(function (prev) {\\n            return _objectSpread2(_objectSpread2({}, prev), {}, {\\n              current: next\\n            });\\n          });\\n        }\\n      },\\n      // Registers the step\\n      register: function register(name, step, initial) {\\n        stepsByName.set(name, step);\\n\\n        if (!initial) {\\n          setMultistepState(function (prev) {\\n            return _objectSpread2(_objectSpread2({}, prev), {}, {\\n              steps: Array.from(stepsByName.keys())\\n            });\\n          });\\n        }\\n      },\\n      // Deregisters the step\\n      deregister: function deregister(name) {\\n        stepsByName[\"delete\"](name);\\n        setMultistepState(function (prev) {\\n          return _objectSpread2(_objectSpread2({}, prev), {}, {\\n            steps: Array.from(stepsByName.keys())\\n          });\\n        });\\n      }\\n    };\\n\\n    if (multistepApiRef) {\\n      multistepApiRef.current = api;\\n    }\\n\\n    return api;\\n  }),\\n      _useState4 = _slicedToArray(_useState3, 1),\\n      multistepApi = _useState4[0]; // Render funtion that will provide state and api\\n\\n\\n  var render = function render(children) {\\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(MultistepApiContext.Provider, {\\n      value: multistepApi\\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(MultistepStateContext.Provider, {\\n      value: multistepState\\n    }, children));\\n  };\\n\\n  return _objectSpread2(_objectSpread2(_objectSpread2({}, multistepApi), multistepState), {}, {\\n    render: render\\n  });\\n};\\n\\nfunction useMultistepState() {\\n  return Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useContext\"])(MultistepStateContext);\\n}\\n\\nfunction useMultistepApi() {\\n  return Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useContext\"])(MultistepApiContext);\\n}\\n\\nvar useMultistepStep = function useMultistepStep(_ref) {\\n  var step = _ref.step,\\n      next = _ref.next,\\n      previous = _ref.previous,\\n      relevant = _ref.relevant;\\n\\n  var _useFormState = useFormState(),\\n      values = _useFormState.values;\\n\\n  var _useMultistepState = useMultistepState(),\\n      current = _useMultistepState.current;\\n\\n  var _useMultistepApi = useMultistepApi(),\\n      register = _useMultistepApi.register,\\n      deregister = _useMultistepApi.deregister;\\n\\n  var isCurrent = step === current;\\n  var isRelevant = relevant ? relevant(values) : true;\\n  var nextRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(next);\\n  var prevRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])(previous);\\n  var relevantRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\\n  nextRef.current = next;\\n  prevRef.current = previous;\\n  relevantRef.current = relevant;\\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(function () {\\n    register(step, {\\n      name: step,\\n      getNext: function getNext() {\\n        return nextRef.current;\\n      },\\n      getPrevious: function getPrevious() {\\n        return prevRef.current;\\n      }\\n    }, true);\\n  });\\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\\n    register(step, {\\n      name: step,\\n      getNext: function getNext() {\\n        return nextRef.current;\\n      },\\n      getPrevious: function getPrevious() {\\n        return prevRef.current;\\n      }\\n    });\\n    return function () {\\n      deregister(step);\\n    };\\n  }, [step]);\\n\\n  var render = function render(children) {\\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(MultistepStepContext.Provider, {\\n      value: {\\n        relevant: function relevant(params) {\\n          return relevantRef.current ? relevantRef.current(params) : true;\\n        },\\n        multistep: true\\n      }\\n    }, isCurrent && isRelevant ? children : null);\\n  };\\n\\n  return {\\n    isCurrent: isCurrent,\\n    isRelevant: isRelevant,\\n    step: step,\\n    render: render\\n  };\\n};\\n\\nfunction Multistep(_ref) {\\n  var children = _ref.children,\\n      props = _objectWithoutProperties(_ref, [\"children\"]);\\n\\n  var _useMultistep = useMultistep(props),\\n      render = _useMultistep.render,\\n      context = _objectWithoutProperties(_useMultistep, [\"render\"]);\\n\\n  if (typeof children === \\'function\\') {\\n    return render(children(context));\\n  }\\n\\n  return render(children);\\n}\\n\\nMultistep.Step = function MultistepStep(_ref2) {\\n  var children = _ref2.children,\\n      props = _objectWithoutProperties(_ref2, [\"children\"]);\\n\\n  var _useMultistepStep = useMultistepStep(props),\\n      render = _useMultistepStep.render;\\n\\n  return render(children);\\n};\\n\\nvar FormField = function FormField(_ref) {\\n  var field = _ref.field;\\n\\n  // Get the field map off the forms context\\n  var _useContext = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useContext\"])(FormRegisterContext),\\n      fieldMap = _useContext.fieldMap; // Grab the form api ( we need it to get the actual field name because might be in scope )\\n\\n\\n  var _useFormApi = useFormApi(),\\n      getFullField = _useFormApi.getFullField,\\n      getOptions = _useFormApi.getOptions; // Grab the full field\\n\\n\\n  var fullField = getFullField(field); // Grap the schema\\n\\n  var _getOptions = getOptions(),\\n      schema = _getOptions.schema; // First find property from the schema via the path to that field\\n  // Examples\\n  // field = \"name\" ---\\x3e properties.name\\n  // field = \"brother.name\" ---\\x3e properties.brother.properties.name\\n  // field = \"brother.siblings[1].friend.name\" ---\\x3e properties.brother.properties.siblings.items[1].properties.friend.properties.name\\n\\n\\n  var path = getSchemaPathFromJsonPath(fullField);\\n  var property = ObjectMap.get(schema, path); // If property was not found return null\\n\\n  if (!property) {\\n    return null;\\n  } // Next compute the field from property\\n\\n\\n  var schemaField = computeFieldFromProperty(field, property);\\n  var props = schemaField.props,\\n      componentType = schemaField.componentType;\\n  var Component = fieldMap[componentType];\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _extends({\\n    field: field\\n  }, props));\\n};\\n\\nvar SchemaFields = function SchemaFields() {\\n  var _useFormApi = useFormApi(),\\n      getOptions = _useFormApi.getOptions; // Grap the schema\\n\\n\\n  var _getOptions = getOptions(),\\n      schema = _getOptions.schema;\\n\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormFields, {\\n    schema: schema\\n  });\\n};\\n\\nvar withFormApi = function withFormApi(Component) {\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.forwardRef(function (props, ref) {\\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormApiContext.Consumer, null, function (formApi) {\\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _extends({\\n        formApi: formApi,\\n        ref: ref\\n      }, props));\\n    });\\n  });\\n};\\n\\nvar withFormState = function withFormState(Component) {\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.forwardRef(function (props, ref) {\\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(FormStateContext.Consumer, null, function (formState) {\\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _extends({\\n        formState: formState,\\n        ref: ref\\n      }, props));\\n    });\\n  });\\n};\\n\\nvar buildFieldApi = function buildFieldApi(formApi, field) {\\n  return {\\n    // TODO refactor to use field api from updater.. need to make sure this \\n    // will be stable\\n    getValue: function getValue() {\\n      return formApi.getValue(field);\\n    },\\n    setValue: function setValue(value) {\\n      return formApi.setValue(field, value);\\n    },\\n    getTouched: function getTouched() {\\n      return formApi.getTouched(field);\\n    },\\n    setTouched: function setTouched(value) {\\n      return formApi.setTouched(field, value);\\n    },\\n    getError: function getError() {\\n      return formApi.getError(field);\\n    },\\n    setError: function setError(value) {\\n      return formApi.setError(field, value);\\n    },\\n    reset: function reset() {\\n      return formApi.resetField(field);\\n    },\\n    validate: function validate() {\\n      return formApi.validateField(field);\\n    },\\n    exists: function exists() {\\n      return formApi.fieldExists(field);\\n    }\\n  };\\n};\\n\\nfunction useFieldApi(field) {\\n  var formApi = useFormApi();\\n  var fieldApi = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useMemo\"])(function () {\\n    return buildFieldApi(formApi, field);\\n  }, [field]);\\n  return fieldApi;\\n}\\n\\nvar buildFieldState = function buildFieldState(fieldApi) {\\n  return {\\n    value: fieldApi.getValue(),\\n    touched: fieldApi.getTouched(),\\n    error: fieldApi.getError()\\n  };\\n};\\n\\nfunction useFieldState(field) {\\n  var fieldApi = useFieldApi(field); // TODO find better way to get this to rerender\\n\\n  var formState = useFormState(); // The above is a temp hack\\n\\n  var fieldState = buildFieldState(fieldApi);\\n  return fieldState;\\n}\\n\\nvar withFieldState = function withFieldState(field) {\\n  return function (Component) {\\n    return function (props) {\\n      var fieldState = useFieldState(field);\\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _extends({\\n        fieldState: fieldState\\n      }, props));\\n    };\\n  };\\n};\\n\\nvar withFieldApi = function withFieldApi(field) {\\n  return function (Component) {\\n    return function (props) {\\n      var fieldApi = useFieldApi(field);\\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component, _extends({\\n        fieldApi: fieldApi\\n      }, props));\\n    };\\n  };\\n};\\n\\nvar Option = function Option(_ref) {\\n  var value = _ref.value,\\n      forwardedRef = _ref.forwardedRef,\\n      children = _ref.children,\\n      rest = _objectWithoutProperties(_ref, [\"value\", \"forwardedRef\", \"children\"]);\\n\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"option\", _extends({\\n    ref: forwardedRef,\\n    value: value,\\n    key: value\\n  }, rest), children);\\n};\\n\\nvar Input = Text$1;\\n\\n\\n\\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/informed/dist/esm/index.js\\n')}}]);","extractedComments":[]}