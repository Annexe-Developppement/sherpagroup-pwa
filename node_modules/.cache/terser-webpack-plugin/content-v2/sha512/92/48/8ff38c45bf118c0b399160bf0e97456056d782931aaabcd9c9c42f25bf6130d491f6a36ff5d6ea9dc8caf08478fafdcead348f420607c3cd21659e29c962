{"map":"{\"version\":3,\"sources\":[\"4.0e923ac41435d038bfb8.js\"],\"names\":[\"window\",\"push\",\"./node_modules/@magento/peregrine/lib/talons/FilterModal/helpers.js\",\"module\",\"__webpack_exports__\",\"__webpack_require__\",\"eval\"],\"mappings\":\"CAACA,OAAqB,aAAIA,OAAqB,cAAK,IAAIC,KAAK,CAAC,CAAC,GAAG,CAE5DC;;;;2HAKA,SAAUC,OAAQC,oBAAqBC,qBAE7C,aACAC,KAAK\"}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{\"./node_modules/@magento/peregrine/lib/talons/FilterModal/helpers.js\":\n/*!***************************************************************************!*\\\n  !*** ./node_modules/@magento/peregrine/lib/talons/FilterModal/helpers.js ***!\n  \\***************************************************************************/\n/*! exports provided: DELIMITER, getSearchFromState, getStateFromSearch, getFiltersFromSearch, stripHtml, getFilterInput */function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DELIMITER\", function() { return DELIMITER; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSearchFromState\", function() { return getSearchFromState; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getStateFromSearch\", function() { return getStateFromSearch; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getFiltersFromSearch\", function() { return getFiltersFromSearch; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stripHtml\", function() { return stripHtml; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getFilterInput\", function() { return getFilterInput; });\\nconst DELIMITER = \\',\\';\\nconst getSearchFromState = (initialValue, filterKeys, filterState) => {\\n  // preserve all existing params\\n  const nextParams = new URLSearchParams(initialValue); // iterate over available filters\\n\\n  for (const key of filterKeys) {\\n    // remove any existing filter values\\n    nextParams.delete(key);\\n  } // iterate over the latest filter values\\n\\n\\n  for (const [group, items] of filterState) {\\n    for (const item of items) {\\n      const {\\n        title,\\n        value\\n      } = item || {}; // append the new values\\n\\n      nextParams.append(`${group}[filter]`, `${title}${DELIMITER}${value}`);\\n    }\\n  } // prepend `?` to the final string\\n\\n\\n  return `?${nextParams.toString()}`;\\n};\\nconst getStateFromSearch = (initialValue, filterKeys, filterItems) => {\\n  // preserve all existing params\\n  const params = new URLSearchParams(initialValue);\\n  const uniqueKeys = new Set(params.keys());\\n  const nextState = new Map(); // iterate over existing param keys\\n\\n  for (const key of uniqueKeys) {\\n    // if a key matches a known filter, add its items to the next state\\n    if (filterKeys.has(key) && key.endsWith(\\'[filter]\\')) {\\n      // derive the group by slicing off `[filter]`\\n      const group = key.slice(0, -8);\\n      const items = new Set();\\n      const groupItemsByValue = new Map(); // cache items by value to avoid inefficient lookups\\n\\n      for (const item of filterItems.get(group)) {\\n        groupItemsByValue.set(item.value, item);\\n      } // map item values to items\\n\\n\\n      for (const value of params.getAll(key)) {\\n        const existingFilter = groupItemsByValue.get(getValueFromFilterString(value));\\n\\n        if (existingFilter) {\\n          items.add(existingFilter);\\n        } else {\\n          console.warn(`Existing filter ${value} not found in possible filters`);\\n        }\\n      } // add items to the next state, keyed by group\\n\\n\\n      nextState.set(group, items);\\n    }\\n  }\\n\\n  return nextState;\\n};\\n/**\\n * Looks for filter values within a search string and returns a map like\\n * {\\n *   \"category_id\": [\"Bottoms,28\", \"Pants & Shorts,19\"]\\n * }\\n * filter[category_id]=Bottoms,28&filter[category_id]=Pants & Shorts,19\\n * @param {String} initialValue a search string, as in from location.search\\n */\\n\\nconst getFiltersFromSearch = initialValue => {\\n  // preserve all existing params\\n  const params = new URLSearchParams(initialValue);\\n  const uniqueKeys = new Set(params.keys());\\n  const filters = new Map(); // iterate over existing param keys\\n\\n  for (const key of uniqueKeys) {\\n    // if a key matches a known filter, add its items to the next state\\n    if (key.endsWith(\\'[filter]\\')) {\\n      // derive the group by slicing off `[filter]`\\n      const group = key.slice(0, -8);\\n      const items = new Set(); // map item values to items\\n\\n      for (const value of params.getAll(key)) {\\n        items.add(value);\\n      } // add items to the next state, keyed by group\\n\\n\\n      filters.set(group, items);\\n    }\\n  }\\n\\n  return filters;\\n};\\nconst stripHtml = html => html.replace(/(<([^>]+)>)/gi, \\'\\');\\n/** GetFilterInput helpers below. */\\n\\nconst getValueFromFilterString = keyValueString => keyValueString.split(DELIMITER)[1];\\n/**\\n * Converts a set of values to a range filter\\n * @param {Set} values\\n */\\n\\n\\nconst toRangeFilter = values => {\\n  // Range should always only be a single string. In the event we received\\n  // multiple, just return the first.\\n  const rangeString = getValueFromFilterString(Array.from(values)[0]);\\n  const [from, to] = rangeString.split(\\'_\\');\\n  const rangeFilter = {\\n    from,\\n    to\\n  };\\n\\n  if (rangeFilter.from === \\'*\\') {\\n    delete rangeFilter.from;\\n  }\\n\\n  if (rangeFilter.to === \\'*\\') {\\n    delete rangeFilter.to;\\n  }\\n\\n  return rangeFilter;\\n};\\n/**\\n * Converts a set of values into an equals filter\\n * @param {Set} values\\n */\\n\\n\\nconst toEqualFilter = values => {\\n  if (values.size > 1) {\\n    return {\\n      in: Array.from(values).map(getValueFromFilterString)\\n    };\\n  } else {\\n    return {\\n      eq: getValueFromFilterString(Array.from(values)[0])\\n    };\\n  }\\n};\\n/**\\n * Converts a set of values into a match filter\\n * @param {Set} values\\n */\\n\\n\\nconst toMatchFilter = values => {\\n  return {\\n    match: getValueFromFilterString(Array.from(values)[0])\\n  };\\n};\\n\\nconst CONVERSION_FUNCTIONS = {\\n  FilterEqualTypeInput: toEqualFilter,\\n  FilterMatchTypeInput: toMatchFilter,\\n  FilterRangeTypeInput: toRangeFilter\\n};\\n/**\\n * Returns a filter input object matching the type provided.\\n *\\n * @param values - A set of values to construct the result object from.\\n * @param type - Any of the possible types of filter input types\\n */\\n\\nconst getFilterInput = (values, type) => {\\n  const conversionFunction = CONVERSION_FUNCTIONS[type];\\n\\n  if (!conversionFunction) {\\n    throw TypeError(`Unknown type ${type}`);\\n  }\\n\\n  return conversionFunction(values);\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/@magento/peregrine/lib/talons/FilterModal/helpers.js\\n')}}]);","extractedComments":[]}